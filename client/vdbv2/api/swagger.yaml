openapi: 3.0.1
info:
  title: vDB API
  description: "API for working with vDB Instances (Relational Databases, MemoryStore\
    \ Databases and Kafka Clusters)."
  version: "1.0"
servers:
- url: https://vdb-gateway.vngcloud.vn
  description: Generated server url
paths:
  /vdb-memory/v1/database-instances/{dbInstanceId}/update-setting:
    put:
      tags:
      - MemoryStore Database API
      operationId: updateDatabaseSetting
      parameters:
      - name: dbInstanceId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: string
              example: "{\"dbInstanceId\":\"db-b0c9332f-96da-4aff-9439-38f9a9e2bf46\"\
                ,\"redisPassword\":\"abcd1234abcd1234\",\"redisPasswordEnabled\":true,\"\
                editRedisPassword\":true,\"publicAccess\":false,\"backupAuto\":true,\"\
                backupDuration\":2,\"backupTime\":\"00:00\",\"updateType\":0}"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/WrapContentObject'
        "202":
          description: Accepted
        "204":
          description: No Content
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Resource Not Found
        "500":
          description: Internal Server Error
  /vdb-memory/v1/database-instances/{dbInstanceId}/update-config-group:
    put:
      tags:
      - MemoryStore Database API
      operationId: updateDatabaseConfigGroup
      parameters:
      - name: dbInstanceId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: string
              example: "{\"dbInstanceId\":\"db-b0c9332f-96da-4aff-9439-38f9a9e2bf46\"\
                ,\"configId\":\"cfg-89bd25dc-79a5-49a8-9278-3ef0b23bba36\",\"updateType\"\
                :1}"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/WrapContentObject'
        "202":
          description: Accepted
        "204":
          description: No Content
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Resource Not Found
        "500":
          description: Internal Server Error
  /vdb-memory/v1/database-instances/{dbInstanceId}/secrules:
    get:
      tags:
      - MemoryStore Database API
      operationId: getSecurityRules_1
      parameters:
      - name: dbInstanceId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/WrapContentListSecurityGroupRuleEntity'
        "202":
          description: Accepted
        "204":
          description: No Content
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Resource Not Found
        "500":
          description: Internal Server Error
    put:
      tags:
      - MemoryStore Database API
      operationId: updateSecurityRules
      parameters:
      - name: dbInstanceId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: string
              example: "[{\"id\":\"98a148e4-8eb8-4aa5-a5a2-bcdbfd3b821b\",\"direction\"\
                :\"ingress\",\"etherType\":\"IPv4\",\"protocol\":\"tcp\",\"portRangeMin\"\
                :6379,\"portRangeMax\":6379,\"remoteIpPrefix\":\"10.11.0.0/16\"},{\"\
                direction\":\"ingress\",\"etherType\":\"IPv4\",\"protocol\":\"tcp\"\
                ,\"portRangeMin\":6379,\"portRangeMax\":6379,\"remoteIpPrefix\":\"\
                10.10.0.0/16\"}]"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/WrapContentListSecurityGroupRuleEntity'
        "202":
          description: Accepted
        "204":
          description: No Content
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Resource Not Found
        "500":
          description: Internal Server Error
  /vdb-memory/v1/configurations/update:
    put:
      tags:
      - MemoryStore Configuration group API
      operationId: updateConfig
      requestBody:
        content:
          application/json:
            schema:
              type: string
              example: "{\"id\":\"cfg-1bbe18fb-8736-4307-a60d-f87e057c544c\",\"name\"\
                :\"redis40\",\"datastoreType\":\"Redis\",\"datastoreVersion\":\"4.0\"\
                ,\"engineGroup\":2,\"values\":{\"activedefrag\":false,\"appendonly\"\
                :false}}"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/WrapContentItemConfigInfo'
        "202":
          description: Accepted
        "204":
          description: No Content
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Resource Not Found
        "500":
          description: Internal Server Error
  /vdb-kafka/clusters/{clusterId}/users/{userId}:
    get:
      tags:
      - Kafka Cluster API
      operationId: getUserById
      parameters:
      - name: clusterId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: userId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
                x-content-type: '*/*'
        "202":
          description: Accepted
        "204":
          description: No Content
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Resource Not Found
        "500":
          description: Internal Server Error
    put:
      tags:
      - Kafka Cluster API
      operationId: updateUser
      parameters:
      - name: clusterId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: userId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: string
              example: "{\"produceTopicNames\":[\"string\"],\"produceAll\":true,\"\
                consumeTopicNames\":[\"string\"],\"consumeAll\":true,\"mtlsAuthen\"\
                :true,\"saslAuthen\":true}"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
                x-content-type: '*/*'
        "202":
          description: Accepted
        "204":
          description: No Content
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Resource Not Found
        "500":
          description: Internal Server Error
    delete:
      tags:
      - Kafka Cluster API
      operationId: deleteUser
      parameters:
      - name: clusterId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: userId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
                x-content-type: '*/*'
        "202":
          description: Accepted
        "204":
          description: No Content
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Resource Not Found
        "500":
          description: Internal Server Error
  /vdb-kafka/clusters/{clusterId}/users/{userId}/regenerate-creds:
    put:
      tags:
      - Kafka Cluster API
      operationId: regenerateUserAuthenCreds
      parameters:
      - name: clusterId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: userId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
                x-content-type: '*/*'
        "202":
          description: Accepted
        "204":
          description: No Content
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Resource Not Found
        "500":
          description: Internal Server Error
  /vdb-kafka/clusters/{clusterId}/topics/{topicId}:
    get:
      tags:
      - Kafka Cluster API
      operationId: getTopicById
      parameters:
      - name: clusterId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: topicId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
                x-content-type: '*/*'
        "202":
          description: Accepted
        "204":
          description: No Content
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Resource Not Found
        "500":
          description: Internal Server Error
    put:
      tags:
      - Kafka Cluster API
      operationId: updateTopic
      parameters:
      - name: clusterId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: topicId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: string
              example: "{\"partitions\":0,\"replicas\":0,\"retentionSeconds\":0,\"\
                retentionBytes\":0}"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
                x-content-type: '*/*'
        "202":
          description: Accepted
        "204":
          description: No Content
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Resource Not Found
        "500":
          description: Internal Server Error
    delete:
      tags:
      - Kafka Cluster API
      operationId: deleteTopic
      parameters:
      - name: clusterId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: topicId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
                x-content-type: '*/*'
        "202":
          description: Accepted
        "204":
          description: No Content
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Resource Not Found
        "500":
          description: Internal Server Error
  /vdb-kafka/clusters/{clusterId}/public-access:
    put:
      tags:
      - Kafka Cluster API
      operationId: updatePublicAccess
      parameters:
      - name: clusterId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: enable
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
                x-content-type: '*/*'
        "202":
          description: Accepted
        "204":
          description: No Content
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Resource Not Found
        "500":
          description: Internal Server Error
  /vdb-kafka/clusters/{clusterId}/kafka-storage-type:
    put:
      tags:
      - Kafka Cluster API
      operationId: updateStorageType
      parameters:
      - name: clusterId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: storageType
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: user-type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
          default: ROOT_USER
          enum:
          - ROOT_USER
          - IAM_USER
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/WrapContentListOrderResponse'
        "202":
          description: Accepted
        "204":
          description: No Content
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Resource Not Found
        "500":
          description: Internal Server Error
  /vdb-kafka/clusters/{clusterId}/kafka-storage-size:
    put:
      tags:
      - Kafka Cluster API
      operationId: updateStorageSize
      parameters:
      - name: clusterId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: size
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: integer
          format: int32
      - name: user-type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
          default: ROOT_USER
          enum:
          - ROOT_USER
          - IAM_USER
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/WrapContentListOrderResponse'
        "202":
          description: Accepted
        "204":
          description: No Content
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Resource Not Found
        "500":
          description: Internal Server Error
  /vdb-kafka/clusters/{clusterId}/kafka-broker-count:
    put:
      tags:
      - Kafka Cluster API
      operationId: updateBrokerCount
      parameters:
      - name: clusterId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: count
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: integer
          format: int32
      - name: rebalance
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: boolean
      - name: user-type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
          default: ROOT_USER
          enum:
          - ROOT_USER
          - IAM_USER
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/WrapContentListOrderResponse'
        "202":
          description: Accepted
        "204":
          description: No Content
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Resource Not Found
        "500":
          description: Internal Server Error
  /vdb-kafka/clusters/{clusterId}/config-group:
    put:
      tags:
      - Kafka Cluster API
      operationId: updateConfigGroup
      parameters:
      - name: clusterId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: configGroupVersionId
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
                x-content-type: '*/*'
        "202":
          description: Accepted
        "204":
          description: No Content
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Resource Not Found
        "500":
          description: Internal Server Error
  /vdb-kafka/clusters/{clusterId}/authentication:
    put:
      tags:
      - Kafka Cluster API
      operationId: updateAuthentication
      parameters:
      - name: clusterId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: mtlsAuthen
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: boolean
      - name: saslAuthen
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: boolean
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
                x-content-type: '*/*'
        "202":
          description: Accepted
        "204":
          description: No Content
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Resource Not Found
        "500":
          description: Internal Server Error
  /v1/resources/{artifactId}/autoRenew:
    put:
      tags:
      - resource-controller
      operationId: updateAutoRenew
      parameters:
      - name: artifactId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: portal-user-id
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AutoRenewRequest'
        required: true
      responses:
        "200":
          description: OK
        "202":
          description: Accepted
        "204":
          description: No Content
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Resource Not Found
        "500":
          description: Internal Server Error
  /v1/database-instances/{instanceId}/update/setting:
    put:
      tags:
      - Relational Database API
      operationId: updateDatabaseSetting_1
      parameters:
      - name: instanceId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: string
              example: "{\"dbInstanceId\":\"db-70a4fbee-db60-46d2-858c-875478a03a38\"\
                ,\"password\":\"S8oJRwAQ_hXH\",\"publicAccess\":true,\"backupAuto\"\
                :true,\"backupDuration\":2,\"backupTime\":\"00:00\",\"updateType\"\
                :0}"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/WrapContentObject'
        "202":
          description: Accepted
        "204":
          description: No Content
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Resource Not Found
        "500":
          description: Internal Server Error
  /v1/database-instances/{instanceId}/update/config-group:
    put:
      tags:
      - Relational Database API
      operationId: updateDatabaseConfigGroup_1
      parameters:
      - name: instanceId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: string
              example: "{\"dbInstanceId\":\"db-b0c9332f-96da-4aff-9439-38f9a9e2bf46\"\
                ,\"configId\":\"cfg-89bd25dc-79a5-49a8-9278-3ef0b23bba36\",\"updateType\"\
                :1}"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/WrapContentObject'
        "202":
          description: Accepted
        "204":
          description: No Content
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Resource Not Found
        "500":
          description: Internal Server Error
  /v1/database-instances/{instanceId}/secrules:
    get:
      tags:
      - Relational Database API
      operationId: getSecurityRules_2
      parameters:
      - name: instanceId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/WrapContentListSecurityGroupRuleEntity'
        "202":
          description: Accepted
        "204":
          description: No Content
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Resource Not Found
        "500":
          description: Internal Server Error
    put:
      tags:
      - Relational Database API
      operationId: getSecurityRules
      parameters:
      - name: instanceId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/SecurityGroupRuleEntity'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/WrapContentListSecurityGroupRuleEntity'
        "202":
          description: Accepted
        "204":
          description: No Content
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Resource Not Found
        "500":
          description: Internal Server Error
  /v1/configurations/update:
    put:
      tags:
      - Relational Configuration group API
      operationId: updateConfig_1
      requestBody:
        content:
          application/json:
            schema:
              type: string
              example: "{\"id\":\"cfg-449d712c-8769-42c2-ae78-9f6c4fe9d00e\",\"name\"\
                :\"config-1\",\"datastoreType\":\"MySQL\",\"datastoreVersion\":\"\
                5.5\",\"engineGroup\":1,\"values\":{\"autocommit\":1}}"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/WrapContentItemConfigInfo'
        "202":
          description: Accepted
        "204":
          description: No Content
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Resource Not Found
        "500":
          description: Internal Server Error
  /vdb-memory/v1/payment/database-instances:
    post:
      tags:
      - MemoryStore Database API
      operationId: createMemoryStoreDatabaseInstance
      parameters:
      - name: user-type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
          default: ROOT_USER
          enum:
          - ROOT_USER
          - IAM_USER
      requestBody:
        content:
          application/json:
            schema:
              type: string
              example: "{\"backupAuto\":false,\"backupDuration\":2,\"backupTime\"\
                :\"00:00\",\"configId\":\"\",\"datastoreType\":\"Redis\",\"datastoreVersion\"\
                :\"4.0\",\"engineGroup\":2,\"flavorId\":\"9608047\",\"name\":\"nhontt-mem-stg\"\
                ,\"netIds\":[\"sub-c6071119-1a44-42cf-bc03-bb43e584242a\"],\"packageId\"\
                :102,\"packageName\":\"db.s-general-1x2\",\"priceKey\":\"general\"\
                ,\"publicAccess\":false,\"ram\":2,\"redisPassword\":\"abcd1234abcd1234\"\
                ,\"redisPasswordEnabled\":true,\"vcpus\":1,\"volumeId\":0,\"volumeSize\"\
                :0,\"volumeType\":\"ssd-iops200\",\"volumeTypeSku\":\"SSD-IOPS200.dbaas\"\
                ,\"volumeTypeZoneId\":\"1B9FF75D-00F5-49CA-842D-CCD5D04834FB\",\"\
                zoneId\":111}"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/WrapContentListOrderResponse'
        "202":
          description: Accepted
        "204":
          description: No Content
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Resource Not Found
        "500":
          description: Internal Server Error
  /vdb-memory/v1/payment/backup-storages:
    post:
      tags:
      - MemoryStore Backup Storage API
      operationId: createMemoryStoreBackUpStorage
      parameters:
      - name: user-type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
          default: ROOT_USER
          enum:
          - ROOT_USER
          - IAM_USER
      requestBody:
        content:
          application/json:
            schema:
              type: string
              example: "{\"sku\":\"db.backup.quota.100GB\",\"backupPackageId\":6,\"\
                backupPackageName\":\"db.backup.quota.100GB\",\"engineGroup\":2,\"\
                name\":\"memory_store_backup_storage\",\"quota\":\"100\"}"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/WrapContentListOrderResponse'
        "202":
          description: Accepted
        "204":
          description: No Content
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Resource Not Found
        "500":
          description: Internal Server Error
  /vdb-memory/v1/database-instances/{dbInstanceId}/start:
    post:
      tags:
      - MemoryStore Database API
      operationId: startDatabaseInstances
      parameters:
      - name: dbInstanceId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: string
              example: "{\"action\":\"start\",\"databaseInstances\":[{\"instancesId\"\
                :\"db-70a4fbee-db60-46d2-858c-875478a03a38\"}],\"resType\":\"dbaas\"\
                }"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/WrapContentListActionDbInstancesResponse'
        "202":
          description: Accepted
        "204":
          description: No Content
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Resource Not Found
        "500":
          description: Internal Server Error
  /vdb-memory/v1/database-instances/{dbInstanceId}/shutdown:
    post:
      tags:
      - MemoryStore Database API
      operationId: stopDatabaseInstances
      parameters:
      - name: dbInstanceId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: string
              example: "{\"action\":\"stop\",\"databaseInstances\":[{\"instancesId\"\
                :\"db-70a4fbee-db60-46d2-858c-875478a03a38\"}],\"resType\":\"dbaas\"\
                }"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/WrapContentListActionDbInstancesResponse'
        "202":
          description: Accepted
        "204":
          description: No Content
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Resource Not Found
        "500":
          description: Internal Server Error
  /vdb-memory/v1/database-instances/{dbInstanceId}/resize-instance:
    post:
      tags:
      - MemoryStore Database API
      operationId: resizeInstance
      parameters:
      - name: dbInstanceId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: user-type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
          default: ROOT_USER
          enum:
          - ROOT_USER
          - IAM_USER
      requestBody:
        content:
          application/json:
            schema:
              type: string
              example: "{\"resourceType\":\"dbaas\",\"action\":\"resize\",\"databaseInstances\"\
                :[{\"instancesId\":\"db-b0c9332f-96da-4aff-9439-38f9a9e2bf46\",\"\
                config\":{\"engineGroup\":2,\"ram\":4,\"vcpus\":2,\"volumeType\":\"\
                ssd-iops200\",\"volumeSize\":0,\"packageName\":\"db.s-general-2x4\"\
                ,\"updateType\":\"FLAVOR\",\"volumeTypeZoneId\":\"1B9FF75D-00F5-49CA-842D-CCD5D04834FB\"\
                ,\"flavorId\":\"9608049\",\"packageSku\":\"db.s-general-2x4\",\"isResized\"\
                :true,\"packageId\":103}}]}"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/WrapContentListOrderResponse'
        "202":
          description: Accepted
        "204":
          description: No Content
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Resource Not Found
        "500":
          description: Internal Server Error
  /vdb-memory/v1/database-instances/{dbInstanceId}/renew-resource:
    post:
      tags:
      - MemoryStore Database API
      operationId: renewResource
      parameters:
      - name: dbInstanceId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: user-type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
          default: ROOT_USER
          enum:
          - ROOT_USER
          - IAM_USER
      requestBody:
        content:
          application/json:
            schema:
              type: string
              example: "{\"action\":\"renew\",\"databaseInstances\":[{\"instancesId\"\
                :\"db-70a4fbee-db60-46d2-858c-875478a03a38\",\"config\":{\"resId\"\
                :\"db-70a4fbee-db60-46d2-858c-875478a03a38\",\"resName\":\"database-1\"\
                ,\"resType\":\"dbaas\"}}],\"resourceType\":\"dbaas\"}"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/WrapContentListOrderResponse'
        "202":
          description: Accepted
        "204":
          description: No Content
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Resource Not Found
        "500":
          description: Internal Server Error
  /vdb-memory/v1/database-instances/{dbInstanceId}/reboot:
    post:
      tags:
      - MemoryStore Database API
      operationId: restartDatabaseInstances
      parameters:
      - name: dbInstanceId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: string
              example: "{\"action\":\"reboot\",\"databaseInstances\":[{\"instancesId\"\
                :\"db-70a4fbee-db60-46d2-858c-875478a03a38\"}],\"resType\":\"dbaas\"\
                }"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/WrapContentListActionDbInstancesResponse'
        "202":
          description: Accepted
        "204":
          description: No Content
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Resource Not Found
        "500":
          description: Internal Server Error
  /vdb-memory/v1/database-instances/{dbInstanceId}/exchange-poc:
    post:
      tags:
      - MemoryStore Database API
      operationId: exchangePocResource
      parameters:
      - name: dbInstanceId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: user-type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
          default: ROOT_USER
          enum:
          - ROOT_USER
          - IAM_USER
      requestBody:
        content:
          application/json:
            schema:
              type: string
              example: "{\"action\":\"exchange_poc\",\"databaseInstances\":[{\"instancesId\"\
                :\"db-70a4fbee-db60-46d2-858c-875478a03a38\",\"config\":{\"resId\"\
                :\"db-70a4fbee-db60-46d2-858c-875478a03a38\",\"resName\":\"database-1\"\
                ,\"resType\":\"dbaas\"}}],\"resourceType\":\"dbaas\"}"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/WrapContentListOrderResponse'
        "202":
          description: Accepted
        "204":
          description: No Content
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Resource Not Found
        "500":
          description: Internal Server Error
  /vdb-memory/v1/database-instances/{dbInstanceId}/detach-replica:
    post:
      tags:
      - MemoryStore Database API
      operationId: detachReplica
      parameters:
      - name: dbInstanceId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: string
              example: "{\"action\":\"detach_replica\",\"databaseInstances\":[{\"\
                instancesId\":\"db-70a4fbee-db60-46d2-858c-875478a03a38\"}],\"resType\"\
                :\"dbaas\"}"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/WrapContentListActionDbInstancesResponse'
        "202":
          description: Accepted
        "204":
          description: No Content
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Resource Not Found
        "500":
          description: Internal Server Error
  /vdb-memory/v1/database-instances/{dbInstanceId}/delete:
    post:
      tags:
      - MemoryStore Database API
      operationId: deleteDatabaseInstances
      parameters:
      - name: dbInstanceId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: string
              example: "{\"action\":\"delete\",\"databaseInstances\":[{\"instancesId\"\
                :\"db-270a92f0-bba6-4762-911a-44ebd66c0e66\",\"config\":{\"createFinalBackup\"\
                :false,\"deleteAllBackup\":true}}],\"resType\":\"dbaas\"}"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/WrapContentListActionDbInstancesResponse'
        "202":
          description: Accepted
        "204":
          description: No Content
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Resource Not Found
        "500":
          description: Internal Server Error
  /vdb-memory/v1/database-instances/{dbInstanceId}/create-replicas:
    post:
      tags:
      - MemoryStore Database API
      operationId: createDatabaseInstanceReplica
      parameters:
      - name: dbInstanceId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: user-type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
          default: ROOT_USER
          enum:
          - ROOT_USER
          - IAM_USER
      requestBody:
        content:
          application/json:
            schema:
              type: string
              example: "{\"backupAuto\":false,\"backupDuration\":2,\"backupTime\"\
                :\"00:00\",\"configId\":\"\",\"datastoreType\":\"Redis\",\"datastoreVersion\"\
                :\"4.0\",\"engineGroup\":2,\"flavorId\":\"9608099\",\"name\":\"nhontt-mem-rep\"\
                ,\"netIds\":[\"sub-ce1c9565-5abd-446c-ab46-3a9de7517e7a\"],\"packageId\"\
                :64,\"packageName\":\"db.a-general-2x4\",\"path\":\"database-instances\"\
                ,\"priceKey\":\"a-general\",\"publicAccess\":false,\"ram\":4,\"redisPasswordEnabled\"\
                :false,\"vcpus\":2,\"volumeId\":0,\"volumeSize\":0,\"volumeType\"\
                :\"ssd-iops200\",\"volumeTypeSku\":\"SSD-IOPS200.dbaas\",\"volumeTypeZoneId\"\
                :\"1B9FF75D-00F5-49CA-842D-CCD5D04834FB\",\"zoneId\":121,\"replicaSourceId\"\
                :\"db-ff53de54-f755-4b7e-8522-0cae12bd0fa9\"}"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/WrapContentListOrderResponse'
        "202":
          description: Accepted
        "204":
          description: No Content
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Resource Not Found
        "500":
          description: Internal Server Error
  /vdb-memory/v1/configurations/delete:
    post:
      tags:
      - MemoryStore Configuration group API
      operationId: deleteConfigs
      requestBody:
        content:
          application/json:
            schema:
              type: string
              example: "[{\"id\":\"cfg-3fa3776c-8f97-49bd-b1c0-e29f870904df\"}]"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/WrapContentListDeleteConfigResponse'
        "202":
          description: Accepted
        "204":
          description: No Content
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Resource Not Found
        "500":
          description: Internal Server Error
  /vdb-memory/v1/configurations/create:
    post:
      tags:
      - MemoryStore Configuration group API
      operationId: createConfig
      requestBody:
        content:
          application/json:
            schema:
              type: string
              example: "{\"name\":\"redis40\",\"description\":\"abcd\",\"datastoreType\"\
                :\"Redis\",\"datastoreVersion\":\"4.0\",\"engineGroup\":2}"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/WrapContentItemConfigInfo'
        "202":
          description: Accepted
        "204":
          description: No Content
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Resource Not Found
        "500":
          description: Internal Server Error
  /vdb-memory/v1/backups/{backupId}/restore:
    post:
      tags:
      - MemoryStore Backup API
      operationId: restoreBackup
      parameters:
      - name: backupId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: user-type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
          default: ROOT_USER
          enum:
          - ROOT_USER
          - IAM_USER
      requestBody:
        content:
          application/json:
            schema:
              type: string
              example: "{\"resourceType\":\"dbaas-backup\",\"action\":\"restore_backup\"\
                ,\"databaseInstances\":[{\"instancesId\":\"db-71fdffd0-24fa-4e80-baa0-1eb3cc9e06a0\"\
                ,\"config\":{\"backupId\":\"bk-2517476b-c555-43a7-8760-e9c0740b27bf\"\
                ,\"name\":\"database-oi6enyek-1l\",\"ram\":2,\"vcpus\":1,\"flavorId\"\
                :\"9608047\",\"engineGroup\":2,\"volumeSize\":0,\"priceKey\":\"general\"\
                ,\"zoneId\":111,\"datastoreType\":\"Redis\",\"datastoreVersion\":\"\
                4.0\",\"netIds\":[\"sub-c6071119-1a44-42cf-bc03-bb43e584242a\"],\"\
                configId\":\"\",\"publicAccess\":false,\"backupAuto\":true,\"volumeType\"\
                :\"ssd-iops200\",\"packageId\":102,\"backupDuration\":2,\"backupTime\"\
                :\"00:00\",\"packageName\":\"db.s-general-1x2\",\"volumeTypeZoneId\"\
                :\"1B9FF75D-00F5-49CA-842D-CCD5D04834FB\",\"packageSku\":\"db.s-general-1x2\"\
                ,\"volumeTypeSku\":\"SSD-IOPS200.dbaas\",\"redisPassword\":\"abcd1234abcd1234\"\
                ,\"redisPasswordEnabled\":true}}]}"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/WrapContentListOrderResponse'
        "202":
          description: Accepted
        "204":
          description: No Content
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Resource Not Found
        "500":
          description: Internal Server Error
  /vdb-memory/v1/backups/delete:
    post:
      tags:
      - MemoryStore Backup API
      operationId: deleteBackups
      requestBody:
        content:
          application/json:
            schema:
              type: string
              example: "[{\"backupId\":\"bk-4d87c591-8b7f-4a48-85ad-228b4c7fe7eaaa\"\
                }]"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/WrapContentListDeleteBackupResponse'
        "202":
          description: Accepted
        "204":
          description: No Content
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Resource Not Found
        "500":
          description: Internal Server Error
  /vdb-memory/v1/backups/create:
    post:
      tags:
      - MemoryStore Backup API
      operationId: createBackups
      requestBody:
        content:
          application/json:
            schema:
              type: string
              example: "{\"name\":\"backup-odfc1dgu-g3\",\"dbInstanceId\":\"db-4384063b-0839-4346-a059-7a82209e0880\"\
                ,\"backupType\":\"FULL\",\"description\":\"Manual created\",\"engineGroup\"\
                :2}"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/WrapContentCreateBackupResponse'
        "202":
          description: Accepted
        "204":
          description: No Content
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Resource Not Found
        "500":
          description: Internal Server Error
  /vdb-memory/v1/backup-storages/actions/resize:
    post:
      tags:
      - MemoryStore Backup Storage API
      operationId: resizeBackupStorage
      parameters:
      - name: user-type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
          default: ROOT_USER
          enum:
          - ROOT_USER
          - IAM_USER
      requestBody:
        content:
          application/json:
            schema:
              type: string
              example: "{\"resourceType\":\"dbaas-backup-storage\",\"action\":\"resize\"\
                ,\"databaseInstances\":[{\"instancesId\":\"db-bk-storage-1f328ec6-df78-47df-87f5-6a8945a5bae3\"\
                ,\"config\":{\"backupStorageName\":\"memory_store_backup_storage\"\
                ,\"backupPackageName\":\"db.backup.quota.200GB\",\"quota\":\"200\"\
                ,\"backupPackageId\":2,\"sku\":\"db.backup.quota.200GB\",\"engineGroup\"\
                :2}}]}"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/WrapContentListOrderResponse'
        "202":
          description: Accepted
        "204":
          description: No Content
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Resource Not Found
        "500":
          description: Internal Server Error
  /vdb-memory/v1/backup-storages/actions/renew:
    post:
      tags:
      - MemoryStore Backup Storage API
      operationId: renewBackupStorage
      parameters:
      - name: user-type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
          default: ROOT_USER
          enum:
          - ROOT_USER
          - IAM_USER
      requestBody:
        content:
          application/json:
            schema:
              type: string
              example: "{\"resourceType\":\"dbaas-backup-storage\",\"action\":\"renew\"\
                ,\"databaseInstances\":[{\"instancesId\":\"db-bk-storage-c79b1cf3-8110-4553-9d45-5fe0241a0575\"\
                ,\"config\":{\"resId\":\"db-bk-storage-c79b1cf3-8110-4553-9d45-5fe0241a0575\"\
                ,\"resName\":\"memory_store_backup_storage\"}}]}"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/WrapContentListOrderResponse'
        "202":
          description: Accepted
        "204":
          description: No Content
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Resource Not Found
        "500":
          description: Internal Server Error
  /vdb-memory/v1/backup-storages/actions/delete:
    post:
      tags:
      - MemoryStore Backup Storage API
      operationId: deleteBackupStorage
      requestBody:
        content:
          application/json:
            schema:
              type: string
              example: "{\"databaseInstances\":[{\"instancesId\":\"db-bk-storage-11d6e542-d311-47ef-8c50-6abff7b8e8b2\"\
                ,\"config\":{\"engineGroup\":2}}],\"action\":\"delete\",\"resType\"\
                :\"dbaas-backup-storage\"}"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/WrapContentListActionDbInstancesResponse'
        "202":
          description: Accepted
        "204":
          description: No Content
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Resource Not Found
        "500":
          description: Internal Server Error
  /vdb-kafka/config-groups:
    get:
      tags:
      - Kafka Configuration Group API
      operationId: listConfigGroup
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
                x-content-type: '*/*'
        "202":
          description: Accepted
        "204":
          description: No Content
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Resource Not Found
        "500":
          description: Internal Server Error
    post:
      tags:
      - Kafka Configuration Group API
      operationId: createConfigGroup
      requestBody:
        content:
          application/json:
            schema:
              type: string
              example: "{\"name\":\"string\",\"description\":\"string\",\"properties\"\
                :[{\"key\":\"string\",\"value\":\"string\"}]}"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
                x-content-type: '*/*'
        "202":
          description: Accepted
        "204":
          description: No Content
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Resource Not Found
        "500":
          description: Internal Server Error
  /vdb-kafka/config-groups/{configGroupId}/versions:
    post:
      tags:
      - Kafka Configuration Group API
      operationId: createConfigGroupVersion
      parameters:
      - name: configGroupId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: string
              example: "{\"properties\":[{\"key\":\"string\",\"value\":\"string\"\
                }]}"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
                x-content-type: '*/*'
        "202":
          description: Accepted
        "204":
          description: No Content
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Resource Not Found
        "500":
          description: Internal Server Error
  /vdb-kafka/clusters:
    get:
      tags:
      - Kafka Cluster API
      operationId: listClusters
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
                x-content-type: '*/*'
        "202":
          description: Accepted
        "204":
          description: No Content
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Resource Not Found
        "500":
          description: Internal Server Error
    post:
      tags:
      - Kafka Cluster API
      operationId: createOrderCluster
      parameters:
      - name: user-type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
          default: ROOT_USER
          enum:
          - ROOT_USER
          - IAM_USER
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateKafkaClusterRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/WrapContentListOrderResponse'
        "202":
          description: Accepted
        "204":
          description: No Content
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Resource Not Found
        "500":
          description: Internal Server Error
  /vdb-kafka/clusters/{clusterId}/users:
    get:
      tags:
      - Kafka Cluster API
      operationId: listUser
      parameters:
      - name: clusterId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
                x-content-type: '*/*'
        "202":
          description: Accepted
        "204":
          description: No Content
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Resource Not Found
        "500":
          description: Internal Server Error
    post:
      tags:
      - Kafka Cluster API
      operationId: createUser
      parameters:
      - name: clusterId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: string
              example: "{\"name\":\"string\",\"produceTopicNames\":[\"string\"],\"\
                produceAll\":true,\"consumeTopicNames\":[\"string\"],\"consumeAll\"\
                :true,\"mtlsAuthen\":true,\"saslAuthen\":true}"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
                x-content-type: '*/*'
        "202":
          description: Accepted
        "204":
          description: No Content
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Resource Not Found
        "500":
          description: Internal Server Error
  /vdb-kafka/clusters/{clusterId}/topics:
    get:
      tags:
      - Kafka Cluster API
      operationId: listTopic
      parameters:
      - name: clusterId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
                x-content-type: '*/*'
        "202":
          description: Accepted
        "204":
          description: No Content
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Resource Not Found
        "500":
          description: Internal Server Error
    post:
      tags:
      - Kafka Cluster API
      operationId: createTopic
      parameters:
      - name: clusterId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: string
              example: "{\"name\":\"string\",\"partitions\":0,\"replicas\":0,\"retentionSeconds\"\
                :0,\"retentionBytes\":0}"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
                x-content-type: '*/*'
        "202":
          description: Accepted
        "204":
          description: No Content
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Resource Not Found
        "500":
          description: Internal Server Error
  /vdb-kafka/clusters/{clusterId}/security-group-rules:
    post:
      tags:
      - Kafka Cluster API
      operationId: createSecRule
      parameters:
      - name: clusterId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: string
              example: "{\"remoteIp\":\"string\",\"port\":0}"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
                x-content-type: '*/*'
        "202":
          description: Accepted
        "204":
          description: No Content
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Resource Not Found
        "500":
          description: Internal Server Error
  /v1/price:
    post:
      tags:
      - pricing-controller
      operationId: calculatePrice
      parameters:
      - name: portal-user-id
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CalculatePriceRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/CalculatePriceResponse'
        "202":
          description: Accepted
        "204":
          description: No Content
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Resource Not Found
        "500":
          description: Internal Server Error
  /v1/payment/database-instances:
    post:
      tags:
      - Relational Database API
      operationId: createRelationalDatabaseInstance
      parameters:
      - name: user-type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
          default: ROOT_USER
          enum:
          - ROOT_USER
          - IAM_USER
      requestBody:
        content:
          application/json:
            schema:
              type: string
              example: "{\"databases\":[{\"name\":\"database-1\",\"characterSet\"\
                :\"utf8\",\"collate\":\"utf8_general_ci\"}],\"user\":{\"name\":\"\
                test\",\"password\":\"RB74qOoDxQ6D\",\"databases\":[{\"name\":\"database-1\"\
                }]},\"volumeId\":0,\"flavorId\":\"537\",\"name\":\"database-lfduxavl-4t\"\
                ,\"ram\":4,\"vcpus\":2,\"volumeTypeSku\":\"SSD-IOPS2-3000.dbaas\"\
                ,\"volumeSize\":20,\"volumeType\":\"ssd-iops3000\",\"priceKey\":\"\
                a-general\",\"zoneId\":251,\"engineGroup\":1,\"datastoreType\":\"\
                MySQL\",\"datastoreVersion\":\"8.0\",\"netIds\":[\"sub-246df886-3ef8-4d70-87e7-6b87f0caea50\"\
                ],\"configId\":\"cfg-f42c6f8f-2cd1-4fcc-a27c-e06a23ca0c49\",\"publicAccess\"\
                :true,\"backupAuto\":true,\"backupDuration\":2,\"backupTime\":\"00:00\"\
                ,\"packageName\":\"db.a-general-2x4\",\"packageId\":135,\"volumeTypeZoneId\"\
                :\"1B9FF75D-00F5-49CA-842D-CCD5D04834FB\"}"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/WrapContentListOrderResponse'
        "202":
          description: Accepted
        "204":
          description: No Content
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Resource Not Found
        "500":
          description: Internal Server Error
  /v1/payment/backup-storages:
    post:
      tags:
      - Relational Backup Storage API
      operationId: createRelationalBackUpStorage
      parameters:
      - name: user-type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
          default: ROOT_USER
          enum:
          - ROOT_USER
          - IAM_USER
      requestBody:
        content:
          application/json:
            schema:
              type: string
              example: "{\"sku\":\"db.backup.quota.100GB\",\"backupPackageId\":1,\"\
                backupPackageName\":\"db.backup.quota.100GB\",\"engineGroup\":1,\"\
                name\":\"relational_backup_storage\",\"quota\":\"100\",\"startDate\"\
                :\"2024-08-14T03:55:47.931Z\"}"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/WrapContentListOrderResponse'
        "202":
          description: Accepted
        "204":
          description: No Content
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Resource Not Found
        "500":
          description: Internal Server Error
  /v1/database-instances/{resourceId}/renew-resource:
    post:
      tags:
      - Relational Database API
      operationId: renewResource_1
      parameters:
      - name: resourceId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: user-type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
          default: ROOT_USER
          enum:
          - ROOT_USER
          - IAM_USER
      requestBody:
        content:
          application/json:
            schema:
              type: string
              example: "{\"action\":\"renew\",\"databaseInstances\":[{\"instancesId\"\
                :\"db-70a4fbee-db60-46d2-858c-875478a03a38\",\"config\":{\"resId\"\
                :\"db-70a4fbee-db60-46d2-858c-875478a03a38\",\"resName\":\"database-1\"\
                ,\"resType\":\"dbaas\"}}],\"resourceType\":\"dbaas\"}"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/WrapContentListOrderResponse'
        "202":
          description: Accepted
        "204":
          description: No Content
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Resource Not Found
        "500":
          description: Internal Server Error
  /v1/database-instances/{instanceId}/start:
    post:
      tags:
      - Relational Database API
      operationId: startDatabaseInstances_1
      parameters:
      - name: instanceId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: string
              example: "{\"action\":\"start\",\"databaseInstances\":[{\"instancesId\"\
                :\"db-70a4fbee-db60-46d2-858c-875478a03a38\"}],\"resType\":\"dbaas\"\
                }"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/WrapContentListActionDbInstancesResponse'
        "202":
          description: Accepted
        "204":
          description: No Content
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Resource Not Found
        "500":
          description: Internal Server Error
  /v1/database-instances/{instanceId}/shutdown:
    post:
      tags:
      - Relational Database API
      operationId: stopDatabaseInstances_1
      parameters:
      - name: instanceId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: string
              example: "{\"action\":\"stop\",\"databaseInstances\":[{\"instancesId\"\
                :\"db-70a4fbee-db60-46d2-858c-875478a03a38\"}],\"resType\":\"dbaas\"\
                }"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/WrapContentListActionDbInstancesResponse'
        "202":
          description: Accepted
        "204":
          description: No Content
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Resource Not Found
        "500":
          description: Internal Server Error
  /v1/database-instances/{instanceId}/resize-storage:
    post:
      tags:
      - Relational Database API
      operationId: resizeStorage
      parameters:
      - name: instanceId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: user-type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
          default: ROOT_USER
          enum:
          - ROOT_USER
          - IAM_USER
      requestBody:
        content:
          application/json:
            schema:
              type: string
              example: "{\"resourceType\":\"dbaas\",\"action\":\"resize\",\"databaseInstances\"\
                :[{\"instancesId\":\"db-70a4fbee-db60-46d2-858c-875478a03a38\",\"\
                config\":{\"engineGroup\":1,\"ram\":4,\"vcpus\":2,\"volumeType\":\"\
                ssd-iops3200\",\"volumeSize\":20,\"packageName\":\"db.s-general-2x4\"\
                ,\"updateType\":\"VOLUME\",\"volumeTypeZoneId\":\"1B9FF75D-00F5-49CA-842D-CCD5D04834FB\"\
                ,\"volumeTypeSku\":\"SSD-IOPS3200.dbaas\"}}]}"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/WrapContentListOrderResponse'
        "202":
          description: Accepted
        "204":
          description: No Content
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Resource Not Found
        "500":
          description: Internal Server Error
  /v1/database-instances/{instanceId}/resize-instance:
    post:
      tags:
      - Relational Database API
      operationId: resizeInstance_1
      parameters:
      - name: instanceId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: user-type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
          default: ROOT_USER
          enum:
          - ROOT_USER
          - IAM_USER
      requestBody:
        content:
          application/json:
            schema:
              type: string
              example: "{\"resourceType\":\"dbaas\",\"action\":\"resize\",\"databaseInstances\"\
                :[{\"instancesId\":\"db-70a4fbee-db60-46d2-858c-875478a03a38\",\"\
                config\":{\"engineGroup\":1,\"ram\":4,\"vcpus\":2,\"volumeType\":\"\
                ssd-iops3000\",\"volumeSize\":20,\"packageName\":\"db.s-general-2x4\"\
                ,\"updateType\":\"FLAVOR\",\"volumeTypeZoneId\":\"1B9FF75D-00F5-49CA-842D-CCD5D04834FB\"\
                ,\"flavorId\":\"477\",\"packageSku\":\"db.s-general-2x4\",\"isResized\"\
                :true,\"packageId\":103}}]}"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/WrapContentListOrderResponse'
        "202":
          description: Accepted
        "204":
          description: No Content
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Resource Not Found
        "500":
          description: Internal Server Error
  /v1/database-instances/{instanceId}/reboot:
    post:
      tags:
      - Relational Database API
      operationId: restartDatabaseInstances_1
      parameters:
      - name: instanceId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: string
              example: "{\"action\":\"reboot\",\"databaseInstances\":[{\"instancesId\"\
                :\"db-70a4fbee-db60-46d2-858c-875478a03a38\"}],\"resType\":\"dbaas\"\
                }"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/WrapContentListActionDbInstancesResponse'
        "202":
          description: Accepted
        "204":
          description: No Content
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Resource Not Found
        "500":
          description: Internal Server Error
  /v1/database-instances/{instanceId}/detach-replica:
    post:
      tags:
      - Relational Database API
      operationId: detachReplica_1
      parameters:
      - name: instanceId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: string
              example: "{\"action\":\"detach_replica\",\"databaseInstances\":[{\"\
                instancesId\":\"db-70a4fbee-db60-46d2-858c-875478a03a38\"}],\"resType\"\
                :\"dbaas\"}"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/WrapContentListActionDbInstancesResponse'
        "202":
          description: Accepted
        "204":
          description: No Content
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Resource Not Found
        "500":
          description: Internal Server Error
  /v1/database-instances/{instanceId}/delete:
    post:
      tags:
      - Relational Database API
      operationId: deleteDatabaseInstances_1
      parameters:
      - name: instanceId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: string
              example: "{\"action\":\"delete\",\"databaseInstances\":[{\"instancesId\"\
                :\"db-270a92f0-bba6-4762-911a-44ebd66c0e66\",\"config\":{\"createFinalBackup\"\
                :false,\"deleteAllBackup\":true}}],\"resType\":\"dbaas\"}"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/WrapContentListActionDbInstancesResponse'
        "202":
          description: Accepted
        "204":
          description: No Content
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Resource Not Found
        "500":
          description: Internal Server Error
  /v1/database-instances/{id}/create-replicas:
    post:
      tags:
      - Relational Database API
      operationId: createRelationalDatabaseInstanceReplica
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: user-type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
          default: ROOT_USER
          enum:
          - ROOT_USER
          - IAM_USER
      requestBody:
        content:
          application/json:
            schema:
              type: string
              example: "{\"volumeId\":0,\"flavorId\":\"537\",\"name\":\"database-g0viipgc-yh\"\
                ,\"ram\":4,\"vcpus\":2,\"volumeTypeSku\":\"SSD-IOPS2-3000.dbaas\"\
                ,\"volumeSize\":20,\"volumeType\":\"ssd-iops3000\",\"priceKey\":\"\
                a-general\",\"zoneId\":251,\"engineGroup\":1,\"datastoreType\":\"\
                MySQL\",\"datastoreVersion\":\"8.0\",\"netIds\":[\"sub-246df886-3ef8-4d70-87e7-6b87f0caea50\"\
                ],\"configId\":\"\",\"publicAccess\":true,\"backupAuto\":true,\"backupDuration\"\
                :2,\"backupTime\":\"00:00\",\"packageName\":\"db.a-general-2x4\",\"\
                packageId\":135,\"volumeTypeZoneId\":\"1B9FF75D-00F5-49CA-842D-CCD5D04834FB\"\
                ,\"replicaSourceId\":\"db-70a4fbee-db60-46d2-858c-875478a03a38\"}"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/WrapContentListOrderResponse'
        "202":
          description: Accepted
        "204":
          description: No Content
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Resource Not Found
        "500":
          description: Internal Server Error
  /v1/database-instances/exchange-poc:
    post:
      tags:
      - Relational Database API
      operationId: exchangePocResource_1
      parameters:
      - name: user-type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
          default: ROOT_USER
          enum:
          - ROOT_USER
          - IAM_USER
      requestBody:
        content:
          application/json:
            schema:
              type: string
              example: "{\"action\":\"exchange_poc\",\"databaseInstances\":[{\"instancesId\"\
                :\"db-70a4fbee-db60-46d2-858c-875478a03a38\",\"config\":{\"resId\"\
                :\"db-70a4fbee-db60-46d2-858c-875478a03a38\",\"resName\":\"database-1\"\
                ,\"resType\":\"dbaas\"}}],\"resourceType\":\"dbaas\"}"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/WrapContentListOrderResponse'
        "202":
          description: Accepted
        "204":
          description: No Content
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Resource Not Found
        "500":
          description: Internal Server Error
  /v1/configurations/create:
    post:
      tags:
      - Relational Configuration group API
      operationId: createConfig_1
      requestBody:
        content:
          application/json:
            schema:
              type: string
              example: "{\"name\":\"config-1\",\"description\":\"\",\"datastoreType\"\
                :\"MySQL\",\"datastoreVersion\":\"5.5\",\"engineGroup\":1}"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/WrapContentItemConfigInfo'
        "202":
          description: Accepted
        "204":
          description: No Content
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Resource Not Found
        "500":
          description: Internal Server Error
  /v1/backups/{id}/restore:
    post:
      tags:
      - Relational Backup API
      operationId: restoreBackup_1
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: user-type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
          default: ROOT_USER
          enum:
          - ROOT_USER
          - IAM_USER
      requestBody:
        content:
          application/json:
            schema:
              type: string
              example: "{\"resourceType\":\"dbaas-backup\",\"action\":\"restore_backup\"\
                ,\"databaseInstances\":[{\"instancesId\":\"db-71fdffd0-24fa-4e80-baa0-1eb3cc9e06a0\"\
                ,\"config\":{\"backupId\":\"bk-f1018529-11d8-4aae-a733-e2ef6b0f40a8\"\
                ,\"name\":\"database-nw_yt603-wq\",\"ram\":4,\"vcpus\":2,\"flavorId\"\
                :\"477\",\"volumeId\":\"0\",\"engineGroup\":1,\"volumeSize\":20,\"\
                priceKey\":\"general\",\"zoneId\":245,\"datastoreType\":\"MySQL\"\
                ,\"datastoreVersion\":\"8.0\",\"netIds\":[\"sub-246df886-3ef8-4d70-87e7-6b87f0caea50\"\
                ],\"configId\":\"cfg-f42c6f8f-2cd1-4fcc-a27c-e06a23ca0c49\",\"publicAccess\"\
                :true,\"backupAuto\":true,\"volumeType\":\"ssd-iops3000\",\"packageId\"\
                :103,\"backupDuration\":2,\"backupTime\":\"00:00\",\"packageName\"\
                :\"db.s-general-2x4\",\"volumeTypeZoneId\":\"1B9FF75D-00F5-49CA-842D-CCD5D04834FB\"\
                ,\"packageSku\":\"db.s-general-2x4\",\"volumeTypeSku\":\"SSD-IOPS2-3000.dbaas\"\
                }}]}"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/WrapContentListOrderResponse'
        "202":
          description: Accepted
        "204":
          description: No Content
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Resource Not Found
        "500":
          description: Internal Server Error
  /v1/backups/create:
    post:
      tags:
      - Relational Backup API
      operationId: createBackups_1
      requestBody:
        content:
          application/json:
            schema:
              type: string
              example: "{\"name\":\"backup-bii5qju6-23\",\"dbInstanceId\":\"db-70a4fbee-db60-46d2-858c-875478a03a38\"\
                ,\"backupType\":\"INCREMENTAL\",\"description\":\"Manual created\"\
                ,\"engineGroup\":1,\"parentId\":\"bk-e589fd8a-6037-47dc-95a2-338f209dc524\"\
                }"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/WrapContentCreateBackupResponse'
        "202":
          description: Accepted
        "204":
          description: No Content
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Resource Not Found
        "500":
          description: Internal Server Error
  /v1/backup-storages/actions/resize:
    post:
      tags:
      - Relational Backup Storage API
      operationId: resizeBackupStorage_1
      parameters:
      - name: user-type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
          default: ROOT_USER
          enum:
          - ROOT_USER
          - IAM_USER
      requestBody:
        content:
          application/json:
            schema:
              type: string
              example: "{\"resourceType\":\"dbaas-backup-storage\",\"action\":\"resize\"\
                ,\"databaseInstances\":[{\"instancesId\":\"db-bk-storage-a2579c3e-7a44-4d2d-9929-9da0e3cbf829\"\
                ,\"config\":{\"backupStorageName\":\"relational_backup_storage\",\"\
                backupPackageName\":\"db.backup.quota.500GB\",\"quota\":\"500\",\"\
                backupPackageId\":3,\"sku\":\"db.backup.quota.500GB\",\"startDate\"\
                :\"2024-08-13T09:50:26.595Z\",\"engineGroup\":1}}]}"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/WrapContentListOrderResponse'
        "202":
          description: Accepted
        "204":
          description: No Content
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Resource Not Found
        "500":
          description: Internal Server Error
  /v1/backup-storages/actions/renew:
    post:
      tags:
      - Relational Backup Storage API
      operationId: renewBackupStorage_1
      parameters:
      - name: user-type
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
          default: ROOT_USER
          enum:
          - ROOT_USER
          - IAM_USER
      requestBody:
        content:
          application/json:
            schema:
              type: string
              example: "{\"resourceType\":\"dbaas-backup-storage\",\"action\":\"renew\"\
                ,\"databaseInstances\":[{\"instancesId\":\"db-bk-storage-c79b1cf3-8110-4553-9d45-5fe0241a0575\"\
                ,\"config\":{\"resId\":\"db-bk-storage-c79b1cf3-8110-4553-9d45-5fe0241a0575\"\
                ,\"resName\":\"relational_backup_storage\"}}]}"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/WrapContentListOrderResponse'
        "202":
          description: Accepted
        "204":
          description: No Content
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Resource Not Found
        "500":
          description: Internal Server Error
  /v1/backup-storages/actions/deletions:
    post:
      tags:
      - Relational Backup Storage API
      operationId: deleteBackupStorage_1
      requestBody:
        content:
          application/json:
            schema:
              type: string
              example: "{\"databaseInstances\":[{\"instancesId\":\"db-bk-storage-11d6e542-d311-47ef-8c50-6abff7b8e8b2\"\
                ,\"config\":{\"engineGroup\":1}}],\"action\":\"delete\",\"resType\"\
                :\"dbaas-backup-storage\"}"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/WrapContentListActionDbInstancesResponse'
        "202":
          description: Accepted
        "204":
          description: No Content
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Resource Not Found
        "500":
          description: Internal Server Error
  /vdb-memory/v1/database/volume-types:
    get:
      tags:
      - MemoryStore Misc API
      operationId: getVolumeTypes
      parameters:
      - name: portal-user-id
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/WrapContentVolumeTypeGatewayResponse'
        "202":
          description: Accepted
        "204":
          description: No Content
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Resource Not Found
        "500":
          description: Internal Server Error
  /vdb-memory/v1/database/status:
    get:
      tags:
      - MemoryStore Misc API
      operationId: listDatabaseInstanceStatus
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/WrapContentSetString'
        "202":
          description: Accepted
        "204":
          description: No Content
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Resource Not Found
        "500":
          description: Internal Server Error
  /vdb-memory/v1/database/networks:
    get:
      tags:
      - MemoryStore Misc API
      operationId: getListNetwork
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/WrapContentListNetworkResponse'
        "202":
          description: Accepted
        "204":
          description: No Content
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Resource Not Found
        "500":
          description: Internal Server Error
  /vdb-memory/v1/database/networks/subnets:
    get:
      tags:
      - MemoryStore Misc API
      operationId: listNetwork
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/WrapContentListNetworkResponseV2'
        "202":
          description: Accepted
        "204":
          description: No Content
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Resource Not Found
        "500":
          description: Internal Server Error
  /vdb-memory/v1/database/flavors:
    get:
      tags:
      - MemoryStore Misc API
      operationId: getFlavors
      parameters:
      - name: type
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: version
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: portal-user-id
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/WrapContentListFlavorInfo'
        "202":
          description: Accepted
        "204":
          description: No Content
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Resource Not Found
        "500":
          description: Internal Server Error
  /vdb-memory/v1/database/families:
    get:
      tags:
      - MemoryStore Misc API
      operationId: getAllInstanceFamily
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/WrapContentListInstanceFamily'
        "202":
          description: Accepted
        "204":
          description: No Content
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Resource Not Found
        "500":
          description: Internal Server Error
  /vdb-memory/v1/database/engine:
    get:
      tags:
      - MemoryStore Misc API
      operationId: getEngine
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/WrapContentSetEngine'
        "202":
          description: Accepted
        "204":
          description: No Content
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Resource Not Found
        "500":
          description: Internal Server Error
  /vdb-memory/v1/database/datastore:
    get:
      tags:
      - MemoryStore Misc API
      operationId: getAllDatastore
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/WrapContentListEngineVersion'
        "202":
          description: Accepted
        "204":
          description: No Content
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Resource Not Found
        "500":
          description: Internal Server Error
  /vdb-memory/v1/database/configuration:
    get:
      tags:
      - MemoryStore Misc API
      operationId: getDBInstanceConfig
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/WrapContentListItemConfigInfo'
        "202":
          description: Accepted
        "204":
          description: No Content
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Resource Not Found
        "500":
          description: Internal Server Error
  /vdb-memory/v1/database/codes:
    get:
      tags:
      - MemoryStore Misc API
      operationId: getFlavorCodes
      parameters:
      - name: portal-user-id
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/WrapContentSetFlavorCode'
        "202":
          description: Accepted
        "204":
          description: No Content
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Resource Not Found
        "500":
          description: Internal Server Error
  /vdb-memory/v1/database-instances:
    get:
      tags:
      - MemoryStore Database API
      operationId: getDatabaseInstancesByUser
      parameters:
      - name: filterRequest
        in: query
        required: true
        style: form
        explode: true
        schema:
          $ref: '#/components/schemas/FilterRequest'
      - name: pageNumber
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: integer
          format: int32
      - name: pageSize
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/WrapContentDatabaseInstancesGatewayResponse'
        "202":
          description: Accepted
        "204":
          description: No Content
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Resource Not Found
        "500":
          description: Internal Server Error
  /vdb-memory/v1/database-instances/{dbInstanceId}:
    get:
      tags:
      - MemoryStore Database API
      operationId: getDatabaseInstancesById
      parameters:
      - name: dbInstanceId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/WrapContentDbInstanceInfo'
        "202":
          description: Accepted
        "204":
          description: No Content
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Resource Not Found
        "500":
          description: Internal Server Error
  /vdb-memory/v1/database-instances/{dbInstanceId}/replicas:
    get:
      tags:
      - MemoryStore Database API
      operationId: getListReplicas
      parameters:
      - name: dbInstanceId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/WrapContentObject'
        "202":
          description: Accepted
        "204":
          description: No Content
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Resource Not Found
        "500":
          description: Internal Server Error
  /vdb-memory/v1/database-instances/{dbInstanceId}/histories:
    get:
      tags:
      - MemoryStore Database API
      operationId: getHistoryDB
      parameters:
      - name: dbInstanceId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: pageNumber
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int32
          default: 1
      - name: pageSize
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int32
          default: 10
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/WrapContentDBInstancesHistoryGatewayResponse'
        "202":
          description: Accepted
        "204":
          description: No Content
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Resource Not Found
        "500":
          description: Internal Server Error
  /vdb-memory/v1/database-instances/{dbInstanceId}/backups:
    get:
      tags:
      - MemoryStore Database API
      operationId: getListBackupsByInstanceId
      parameters:
      - name: dbInstanceId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/WrapContentListBackupInfo'
        "202":
          description: Accepted
        "204":
          description: No Content
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Resource Not Found
        "500":
          description: Internal Server Error
  /vdb-memory/v1/configurations:
    get:
      tags:
      - MemoryStore Configuration group API
      operationId: getListConfigs
      parameters:
      - name: pageNumber
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int32
          default: 1
      - name: pageSize
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int32
          default: 10
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/WrapContentConfigInfoGatewayResponse'
        "202":
          description: Accepted
        "204":
          description: No Content
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Resource Not Found
        "500":
          description: Internal Server Error
  /vdb-memory/v1/configurations/{configId}/detail:
    get:
      tags:
      - MemoryStore Configuration group API
      operationId: getConfigsById
      parameters:
      - name: configId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/WrapContentItemConfigInfo'
        "202":
          description: Accepted
        "204":
          description: No Content
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Resource Not Found
        "500":
          description: Internal Server Error
  /vdb-memory/v1/configurations/params:
    get:
      tags:
      - MemoryStore Configuration group API
      operationId: getConfigParams
      parameters:
      - name: datastoreType
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: datastoreVersion
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/WrapContentListConfigurationParamInfo'
        "202":
          description: Accepted
        "204":
          description: No Content
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Resource Not Found
        "500":
          description: Internal Server Error
  /vdb-memory/v1/backups:
    get:
      tags:
      - MemoryStore Backup API
      operationId: getListBackups
      parameters:
      - name: pageNumber
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int32
          default: 1
      - name: pageSize
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int32
          default: 10
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/WrapContentBackupInfoGatewayResponse'
        "202":
          description: Accepted
        "204":
          description: No Content
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Resource Not Found
        "500":
          description: Internal Server Error
  /vdb-memory/v1/backups/{backupId}/detail:
    get:
      tags:
      - MemoryStore Backup API
      operationId: getDetailBackupById
      parameters:
      - name: backupId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/WrapContentBackupInfo'
        "202":
          description: Accepted
        "204":
          description: No Content
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Resource Not Found
        "500":
          description: Internal Server Error
  /vdb-memory/v1/backups/free-backup:
    get:
      tags:
      - MemoryStore Backup API
      operationId: getFreeBackupUsage
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/WrapContentFreeBackupStorageInfo'
        "202":
          description: Accepted
        "204":
          description: No Content
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Resource Not Found
        "500":
          description: Internal Server Error
  /vdb-memory/v1/backup-storages:
    get:
      tags:
      - MemoryStore Backup Storage API
      operationId: getListBackupStorage
      parameters:
      - name: engineGroup
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int32
          default: 2
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/WrapContentListBackupStorageDetail'
        "202":
          description: Accepted
        "204":
          description: No Content
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Resource Not Found
        "500":
          description: Internal Server Error
  /vdb-memory/v1/backup-storages/packages:
    get:
      tags:
      - MemoryStore Backup Storage API
      operationId: getListQuotaPackage
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/WrapContentListDbBackupPackageResponse'
        "202":
          description: Accepted
        "204":
          description: No Content
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Resource Not Found
        "500":
          description: Internal Server Error
  /vdb-kafka/database/volume-types:
    get:
      tags:
      - Kafka Misc API
      operationId: getVolumeTypes_1
      parameters:
      - name: portal-user-id
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/WrapContentVolumeTypeGatewayResponse'
        "202":
          description: Accepted
        "204":
          description: No Content
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Resource Not Found
        "500":
          description: Internal Server Error
  /vdb-kafka/database/flavors:
    get:
      tags:
      - Kafka Misc API
      operationId: listFlavor
      parameters:
      - name: type
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          default: kafka
      - name: version
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
          default: "1.0"
      - name: portal-user-id
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/WrapContentListFlavorInfo'
        "202":
          description: Accepted
        "204":
          description: No Content
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Resource Not Found
        "500":
          description: Internal Server Error
  /vdb-kafka/database/families:
    get:
      tags:
      - Kafka Misc API
      operationId: listFamily
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/WrapContentListInstanceFamily'
        "202":
          description: Accepted
        "204":
          description: No Content
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Resource Not Found
        "500":
          description: Internal Server Error
  /vdb-kafka/database/configs:
    get:
      tags:
      - Kafka Misc API
      operationId: listAppConfigs
      parameters:
      - name: portal-user-id
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/WrapContentMapStringString'
        "202":
          description: Accepted
        "204":
          description: No Content
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Resource Not Found
        "500":
          description: Internal Server Error
  /vdb-kafka/database/codes:
    get:
      tags:
      - Kafka Misc API
      operationId: listCode
      parameters:
      - name: portal-user-id
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/WrapContentSetFlavorCode'
        "202":
          description: Accepted
        "204":
          description: No Content
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Resource Not Found
        "500":
          description: Internal Server Error
  /vdb-kafka/config-groups/{configGroupId}:
    get:
      tags:
      - Kafka Configuration Group API
      operationId: getConfigGroupById
      parameters:
      - name: configGroupId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
                x-content-type: '*/*'
        "202":
          description: Accepted
        "204":
          description: No Content
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Resource Not Found
        "500":
          description: Internal Server Error
    delete:
      tags:
      - Kafka Configuration Group API
      operationId: deleteConfigGroup
      parameters:
      - name: configGroupId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
                x-content-type: '*/*'
        "202":
          description: Accepted
        "204":
          description: No Content
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Resource Not Found
        "500":
          description: Internal Server Error
  /vdb-kafka/config-groups/{configGroupId}/versions/{configGroupVersionId}:
    get:
      tags:
      - Kafka Configuration Group API
      operationId: getConfigGroupVersionById
      parameters:
      - name: configGroupId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: configGroupVersionId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
                x-content-type: '*/*'
        "202":
          description: Accepted
        "204":
          description: No Content
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Resource Not Found
        "500":
          description: Internal Server Error
  /vdb-kafka/clusters/{clusterId}:
    get:
      tags:
      - Kafka Cluster API
      operationId: getClusterById
      parameters:
      - name: clusterId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
                x-content-type: '*/*'
        "202":
          description: Accepted
        "204":
          description: No Content
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Resource Not Found
        "500":
          description: Internal Server Error
    delete:
      tags:
      - Kafka Cluster API
      operationId: deleteCluster
      parameters:
      - name: clusterId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
                x-content-type: '*/*'
        "202":
          description: Accepted
        "204":
          description: No Content
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Resource Not Found
        "500":
          description: Internal Server Error
  /vdb-kafka/clusters/{clusterId}/users/{userId}/authen-creds:
    get:
      tags:
      - Kafka Cluster API
      operationId: getUserAuthenCreds
      parameters:
      - name: clusterId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: userId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  type: string
                  format: byte
                x-content-type: '*/*'
        "202":
          description: Accepted
        "204":
          description: No Content
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Resource Not Found
        "500":
          description: Internal Server Error
  /vdb-kafka/clusters/{clusterId}/history:
    get:
      tags:
      - Kafka Cluster API
      operationId: listHistory
      parameters:
      - name: clusterId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
                x-content-type: '*/*'
        "202":
          description: Accepted
        "204":
          description: No Content
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Resource Not Found
        "500":
          description: Internal Server Error
  /v1/resources:
    get:
      tags:
      - resource-controller
      operationId: getListResource
      parameters:
      - name: portal-user-id
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int32
      - name: resourceType
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: renewType
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: status
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/WrapContentResourcesBillingInfo'
        "202":
          description: Accepted
        "204":
          description: No Content
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Resource Not Found
        "500":
          description: Internal Server Error
  /v1/database-instances:
    get:
      tags:
      - Relational Database API
      operationId: getDatabaseInstancesByUser_1
      parameters:
      - name: filterRequest
        in: query
        required: true
        style: form
        explode: true
        schema:
          $ref: '#/components/schemas/FilterRequest'
      - name: pageNumber
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: integer
          format: int32
      - name: pageSize
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/WrapContentDatabaseInstancesGatewayResponse'
        "202":
          description: Accepted
        "204":
          description: No Content
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Resource Not Found
        "500":
          description: Internal Server Error
  /v1/database-instances/{replicaSourceId}/replicas:
    get:
      tags:
      - Relational Database API
      operationId: getListReplicas_1
      parameters:
      - name: replicaSourceId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/WrapContentObject'
        "202":
          description: Accepted
        "204":
          description: No Content
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Resource Not Found
        "500":
          description: Internal Server Error
  /v1/database-instances/{instanceId}/histories:
    get:
      tags:
      - Relational Database API
      operationId: getHistoryDB_1
      parameters:
      - name: instanceId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: pageNumber
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int32
          default: 1
      - name: pageSize
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int32
          default: 10
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/WrapContentDBInstancesHistoryGatewayResponse'
        "202":
          description: Accepted
        "204":
          description: No Content
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Resource Not Found
        "500":
          description: Internal Server Error
  /v1/database-instances/volume/types:
    get:
      tags:
      - Relational Database API
      operationId: getVolumeTypes_2
      parameters:
      - name: portal-user-id
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/WrapContentVolumeTypeGatewayResponse'
        "202":
          description: Accepted
        "204":
          description: No Content
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Resource Not Found
        "500":
          description: Internal Server Error
  /v1/database-instances/networks:
    get:
      tags:
      - Relational Database API
      operationId: getListNetwork_1
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/WrapContentListNetworkResponse'
        "202":
          description: Accepted
        "204":
          description: No Content
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Resource Not Found
        "500":
          description: Internal Server Error
  /v1/database-instances/networks/subnets:
    get:
      tags:
      - Relational Database API
      operationId: listNetwork_1
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/WrapContentListNetworkResponseV2'
        "202":
          description: Accepted
        "204":
          description: No Content
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Resource Not Found
        "500":
          description: Internal Server Error
  /v1/database-instances/id/{dbInstanceId}:
    get:
      tags:
      - Relational Database API
      operationId: getDatabaseInstancesById_1
      parameters:
      - name: dbInstanceId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/WrapContentDbInstanceInfo'
        "202":
          description: Accepted
        "204":
          description: No Content
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Resource Not Found
        "500":
          description: Internal Server Error
  /v1/database-instances/flavors:
    get:
      tags:
      - Relational Database API
      operationId: getFlavors_1
      parameters:
      - name: type
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: version
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: portal-user-id
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/WrapContentListFlavorInfo'
        "202":
          description: Accepted
        "204":
          description: No Content
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Resource Not Found
        "500":
          description: Internal Server Error
  /v1/database-instances/flavor_zones/codes:
    get:
      tags:
      - Relational Database API
      operationId: getFlavorCodes_1
      parameters:
      - name: portal-user-id
        in: header
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/WrapContentSetFlavorCode'
        "202":
          description: Accepted
        "204":
          description: No Content
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Resource Not Found
        "500":
          description: Internal Server Error
  /v1/database-instances/families:
    get:
      tags:
      - Relational Database API
      operationId: getAllInstanceFamily_1
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/WrapContentListInstanceFamily'
        "202":
          description: Accepted
        "204":
          description: No Content
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Resource Not Found
        "500":
          description: Internal Server Error
  /v1/database-instances/engine:
    get:
      tags:
      - Relational Database API
      operationId: getEngine_1
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/WrapContentSetEngine'
        "202":
          description: Accepted
        "204":
          description: No Content
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Resource Not Found
        "500":
          description: Internal Server Error
  /v1/database-instances/datastore:
    get:
      tags:
      - Relational Database API
      operationId: getAllDatastore_1
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/WrapContentListEngineVersion'
        "202":
          description: Accepted
        "204":
          description: No Content
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Resource Not Found
        "500":
          description: Internal Server Error
  /v1/database-instances/configuration:
    get:
      tags:
      - Relational Database API
      operationId: getDBInstanceConfig_1
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/WrapContentListItemConfigInfo'
        "202":
          description: Accepted
        "204":
          description: No Content
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Resource Not Found
        "500":
          description: Internal Server Error
  /v1/configurations:
    get:
      tags:
      - Relational Configuration group API
      operationId: getListConfigs_1
      parameters:
      - name: pageNumber
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int32
          default: 1
      - name: pageSize
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int32
          default: 10
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/WrapContentConfigInfoGatewayResponse'
        "202":
          description: Accepted
        "204":
          description: No Content
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Resource Not Found
        "500":
          description: Internal Server Error
  /v1/configurations/params:
    get:
      tags:
      - Relational Configuration group API
      operationId: getConfigParams_1
      parameters:
      - name: datastoreType
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: datastoreVersion
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/WrapContentListConfigurationParamInfo'
        "202":
          description: Accepted
        "204":
          description: No Content
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Resource Not Found
        "500":
          description: Internal Server Error
  /v1/configurations/id:
    get:
      tags:
      - Relational Configuration group API
      operationId: getConfigsById_1
      parameters:
      - name: id
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/WrapContentItemConfigInfo'
        "202":
          description: Accepted
        "204":
          description: No Content
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Resource Not Found
        "500":
          description: Internal Server Error
  /v1/backups:
    get:
      tags:
      - Relational Backup API
      operationId: getListBackups_1
      parameters:
      - name: pageNumber
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int32
          default: 1
      - name: pageSize
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int32
          default: 10
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/WrapContentBackupInfoGatewayResponse'
        "202":
          description: Accepted
        "204":
          description: No Content
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Resource Not Found
        "500":
          description: Internal Server Error
  /v1/backups/insId/{instanceId}:
    get:
      tags:
      - Relational Backup API
      operationId: getListBackupsByInstanceId_1
      parameters:
      - name: instanceId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/WrapContentListBackupInfo'
        "202":
          description: Accepted
        "204":
          description: No Content
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Resource Not Found
        "500":
          description: Internal Server Error
  /v1/backups/free-backup:
    get:
      tags:
      - Relational Backup API
      operationId: getFreeBackupUsage_1
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/WrapContentFreeBackupStorageInfo'
        "202":
          description: Accepted
        "204":
          description: No Content
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Resource Not Found
        "500":
          description: Internal Server Error
  /v1/backups/detail/{backupId}:
    get:
      tags:
      - Relational Backup API
      operationId: getDetailBackupById_1
      parameters:
      - name: backupId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/WrapContentBackupInfo'
        "202":
          description: Accepted
        "204":
          description: No Content
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Resource Not Found
        "500":
          description: Internal Server Error
  /v1/backup-storages:
    get:
      tags:
      - Relational Backup Storage API
      operationId: getListQuotaPackage_1
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/WrapContentListDbBackupPackageResponse'
        "202":
          description: Accepted
        "204":
          description: No Content
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Resource Not Found
        "500":
          description: Internal Server Error
  /v1/backup-storages/information:
    get:
      tags:
      - Relational Backup Storage API
      operationId: getListBackupStorage_1
      parameters:
      - name: engineGroup
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int32
          default: 1
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/WrapContentListBackupStorageDetail'
        "202":
          description: Accepted
        "204":
          description: No Content
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Resource Not Found
        "500":
          description: Internal Server Error
  /vdb-kafka/clusters/{clusterId}/security-group-rules/{secGroupRuleId}:
    delete:
      tags:
      - Kafka Cluster API
      operationId: deleteSecRule
      parameters:
      - name: clusterId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: secGroupRuleId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: string
                x-content-type: '*/*'
        "202":
          description: Accepted
        "204":
          description: No Content
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Resource Not Found
        "500":
          description: Internal Server Error
  /v1/configurations/delete:
    delete:
      tags:
      - Relational Configuration group API
      operationId: deleteConfigs_1
      requestBody:
        content:
          application/json:
            schema:
              type: string
              example: "[{\"id\":\"cfg-3fa3776c-8f97-49bd-b1c0-e29f870904df\"}]"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/WrapContentListDeleteConfigResponse'
        "202":
          description: Accepted
        "204":
          description: No Content
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Resource Not Found
        "500":
          description: Internal Server Error
  /v1/backups/{backupId}/delete:
    delete:
      tags:
      - Relational Backup API
      operationId: deleteBackups_1
      parameters:
      - name: backupId
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: string
              example: "[{\"backupId\":\"bk-4d87c591-8b7f-4a48-85ad-228b4c7fe7eaaa\"\
                }]"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/WrapContentListDeleteBackupResponse'
        "202":
          description: Accepted
        "204":
          description: No Content
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Resource Not Found
        "500":
          description: Internal Server Error
components:
  schemas:
    WrapContentObject:
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
        data:
          type: object
      example:
        code: 0
        data: {}
        message: message
    SecurityGroupRuleEntity:
      type: object
      properties:
        id:
          type: string
        direction:
          type: string
        etherType:
          type: string
        protocol:
          type: string
        portRangeMin:
          type: integer
          format: int32
        portRangeMax:
          type: integer
          format: int32
        remoteIpPrefix:
          type: string
        remoteGroupId:
          type: string
        remoteGroupName:
          type: string
        status:
          type: string
        description:
          type: string
        createdAt:
          type: string
          format: date-time
        displayCreatedAt:
          type: string
      example:
        remoteGroupId: remoteGroupId
        displayCreatedAt: displayCreatedAt
        description: description
        portRangeMax: 1
        remoteIpPrefix: remoteIpPrefix
        remoteGroupName: remoteGroupName
        createdAt: 2000-01-23T04:56:07.000+00:00
        protocol: protocol
        portRangeMin: 6
        etherType: etherType
        id: id
        direction: direction
        status: status
    WrapContentListSecurityGroupRuleEntity:
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
        data:
          type: array
          items:
            $ref: '#/components/schemas/SecurityGroupRuleEntity'
      example:
        code: 0
        data:
        - remoteGroupId: remoteGroupId
          displayCreatedAt: displayCreatedAt
          description: description
          portRangeMax: 1
          remoteIpPrefix: remoteIpPrefix
          remoteGroupName: remoteGroupName
          createdAt: 2000-01-23T04:56:07.000+00:00
          protocol: protocol
          portRangeMin: 6
          etherType: etherType
          id: id
          direction: direction
          status: status
        - remoteGroupId: remoteGroupId
          displayCreatedAt: displayCreatedAt
          description: description
          portRangeMax: 1
          remoteIpPrefix: remoteIpPrefix
          remoteGroupName: remoteGroupName
          createdAt: 2000-01-23T04:56:07.000+00:00
          protocol: protocol
          portRangeMin: 6
          etherType: etherType
          id: id
          direction: direction
          status: status
        message: message
    ItemConfigInfo:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        datastoreName:
          type: string
        datastoreVersionName:
          type: string
        description:
          type: string
        values:
          type: object
          additionalProperties:
            type: object
        instanceCount:
          type: integer
          format: int32
        instances:
          type: array
          items:
            $ref: '#/components/schemas/TinyDbInstanceInfo'
        created:
          type: string
        updated:
          type: string
        sharedBy:
          type: string
        sharedActions:
          type: array
          items:
            type: string
      example:
        instances:
        - name: name
          id: id
        - name: name
          id: id
        instanceCount: 6
        created: created
        values:
          key: {}
        sharedBy: sharedBy
        name: name
        datastoreVersionName: datastoreVersionName
        description: description
        sharedActions:
        - sharedActions
        - sharedActions
        id: id
        datastoreName: datastoreName
        updated: updated
    TinyDbInstanceInfo:
      type: object
      properties:
        name:
          type: string
        id:
          type: string
      example:
        name: name
        id: id
    WrapContentItemConfigInfo:
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
        data:
          $ref: '#/components/schemas/ItemConfigInfo'
      example:
        code: 0
        data:
          instances:
          - name: name
            id: id
          - name: name
            id: id
          instanceCount: 6
          created: created
          values:
            key: {}
          sharedBy: sharedBy
          name: name
          datastoreVersionName: datastoreVersionName
          description: description
          sharedActions:
          - sharedActions
          - sharedActions
          id: id
          datastoreName: datastoreName
          updated: updated
        message: message
    OrderResponse:
      type: object
      properties:
        orderUrl:
          type: string
        orderId:
          type: string
      example:
        orderUrl: orderUrl
        orderId: orderId
    WrapContentListOrderResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
        data:
          type: array
          items:
            $ref: '#/components/schemas/OrderResponse'
      example:
        code: 0
        data:
        - orderUrl: orderUrl
          orderId: orderId
        - orderUrl: orderUrl
          orderId: orderId
        message: message
    AutoRenewInfo:
      type: object
      properties:
        isEnable:
          type: boolean
        period:
          type: integer
          format: int64
    AutoRenewRequest:
      type: object
      properties:
        product:
          type: string
        artifactType:
          type: string
        artifactId:
          type: string
        autoRenewInfo:
          $ref: '#/components/schemas/AutoRenewInfo'
    ActionDbInstancesResponse:
      type: object
      properties:
        databaseInstances:
          type: string
        action:
          type: string
        status:
          type: string
        success:
          type: boolean
        errorMsg:
          type: string
        code:
          type: integer
          format: int32
      example:
        databaseInstances: databaseInstances
        code: 6
        success: true
        action: action
        status: status
        errorMsg: errorMsg
    WrapContentListActionDbInstancesResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
        data:
          type: array
          items:
            $ref: '#/components/schemas/ActionDbInstancesResponse'
      example:
        code: 0
        data:
        - databaseInstances: databaseInstances
          code: 6
          success: true
          action: action
          status: status
          errorMsg: errorMsg
        - databaseInstances: databaseInstances
          code: 6
          success: true
          action: action
          status: status
          errorMsg: errorMsg
        message: message
    DeleteConfigResponse:
      type: object
      properties:
        errorMsg:
          type: string
        code:
          type: integer
          format: int32
        success:
          type: boolean
        total:
          type: integer
          format: int32
        projectId:
          type: string
        configId:
          type: string
      example:
        total: 1
        code: 6
        success: true
        configId: configId
        projectId: projectId
        errorMsg: errorMsg
    WrapContentListDeleteConfigResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
        data:
          type: array
          items:
            $ref: '#/components/schemas/DeleteConfigResponse'
      example:
        code: 0
        data:
        - total: 1
          code: 6
          success: true
          configId: configId
          projectId: projectId
          errorMsg: errorMsg
        - total: 1
          code: 6
          success: true
          configId: configId
          projectId: projectId
          errorMsg: errorMsg
        message: message
    DeleteBackupResponse:
      type: object
      properties:
        backupId:
          type: string
        action:
          type: string
        status:
          type: string
        errorMsg:
          type: string
        success:
          type: boolean
        code:
          type: integer
          format: int32
      example:
        code: 6
        success: true
        backupId: backupId
        action: action
        status: status
        errorMsg: errorMsg
    WrapContentListDeleteBackupResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
        data:
          type: array
          items:
            $ref: '#/components/schemas/DeleteBackupResponse'
      example:
        code: 0
        data:
        - code: 6
          success: true
          backupId: backupId
          action: action
          status: status
          errorMsg: errorMsg
        - code: 6
          success: true
          backupId: backupId
          action: action
          status: status
          errorMsg: errorMsg
        message: message
    CreateBackupResponse:
      type: object
      properties:
        errorMsg:
          type: string
        code:
          type: integer
          format: int32
        success:
          type: boolean
        total:
          type: integer
          format: int32
        backupId:
          type: string
        projectId:
          type: string
        dbInstanceId:
          type: string
      example:
        total: 1
        code: 6
        success: true
        backupId: backupId
        dbInstanceId: dbInstanceId
        projectId: projectId
        errorMsg: errorMsg
    WrapContentCreateBackupResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
        data:
          $ref: '#/components/schemas/CreateBackupResponse'
      example:
        code: 0
        data:
          total: 1
          code: 6
          success: true
          backupId: backupId
          dbInstanceId: dbInstanceId
          projectId: projectId
          errorMsg: errorMsg
        message: message
    CreateKafkaClusterRequest:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        tags:
          type: object
          additionalProperties:
            type: string
        kafkaVersion:
          type: string
        serverFlavorId:
          type: string
          description: FlavorId
        kafkaBrokerCount:
          type: integer
          format: int32
        kafkaStorageType:
          type: string
          description: Volume Type KafkaUuid
        kafkaStorageSize:
          type: integer
          format: int32
        vserverProjectId:
          type: string
        networkId:
          type: string
        subnetId:
          type: string
        mtlsAuthen:
          type: boolean
        saslAuthen:
          type: boolean
        configGroupVersionId:
          type: string
        encryptionVolume:
          type: boolean
        volumeType:
          type: string
          description: Volume type SKU
        packageName:
          type: string
          description: Flavor SKU
    CalculatePriceRequest:
      required:
      - action
      - resourceType
      type: object
      properties:
        resourceType:
          pattern: dbaas|dbaas-backup-storage|kafka
          type: string
        action:
          pattern: create|create_kafka|resize_flavor|resize_volume|show_list_price|renew|resize_backup_storage|renew_backup_storage|resize_volume_kafka|resize_broker_kafka
          type: string
        resourceInfo:
          type: object
    CalculatePriceResponse:
      type: object
      properties:
        optimumPrice:
          type: integer
          format: int64
        discountPercent:
          type: number
          format: double
        originalPrice:
          type: integer
          format: int64
        discountPrice:
          type: integer
          format: int64
        propertiesPrice:
          type: array
          items:
            $ref: '#/components/schemas/PropertyPrice'
      example:
        propertiesPrice:
        - discountPercent: 7.061401241503109
          optimumPrice: 5
          monthlyPrice: 2
          type: type
        - discountPercent: 7.061401241503109
          optimumPrice: 5
          monthlyPrice: 2
          type: type
        discountPercent: 6.027456183070403
        originalPrice: 1
        discountPrice: 5
        optimumPrice: 0
    PropertyPrice:
      type: object
      properties:
        optimumPrice:
          type: integer
          format: int64
        monthlyPrice:
          type: integer
          format: int64
        discountPercent:
          type: number
          format: double
        type:
          type: string
      example:
        discountPercent: 7.061401241503109
        optimumPrice: 5
        monthlyPrice: 2
        type: type
    VolumeTypeGatewayResponse:
      type: object
      properties:
        projectId:
          type: string
        data:
          type: array
          items:
            $ref: '#/components/schemas/VolumeTypeInfo'
      example:
        data:
        - volumeTypeZoneId: volumeTypeZoneId
          volumeTypeSku: volumeTypeSku
          iops: 2
          iopsId: 1
          description: description
          id: 6
          maxVolumeSize: 5
          type: type
          kafkaUuid: kafkaUuid
          minVolumeSize: 5
        - volumeTypeZoneId: volumeTypeZoneId
          volumeTypeSku: volumeTypeSku
          iops: 2
          iopsId: 1
          description: description
          id: 6
          maxVolumeSize: 5
          type: type
          kafkaUuid: kafkaUuid
          minVolumeSize: 5
        projectId: projectId
    VolumeTypeInfo:
      type: object
      properties:
        id:
          type: integer
          format: int32
        iopsId:
          type: integer
          format: int32
        type:
          type: string
        description:
          type: string
        minVolumeSize:
          type: integer
          format: int32
        maxVolumeSize:
          type: integer
          format: int32
        volumeTypeZoneId:
          type: string
        volumeTypeSku:
          type: string
        kafkaUuid:
          type: string
        iops:
          type: integer
          format: int32
      example:
        volumeTypeZoneId: volumeTypeZoneId
        volumeTypeSku: volumeTypeSku
        iops: 2
        iopsId: 1
        description: description
        id: 6
        maxVolumeSize: 5
        type: type
        kafkaUuid: kafkaUuid
        minVolumeSize: 5
    WrapContentVolumeTypeGatewayResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
        data:
          $ref: '#/components/schemas/VolumeTypeGatewayResponse'
      example:
        code: 0
        data:
          data:
          - volumeTypeZoneId: volumeTypeZoneId
            volumeTypeSku: volumeTypeSku
            iops: 2
            iopsId: 1
            description: description
            id: 6
            maxVolumeSize: 5
            type: type
            kafkaUuid: kafkaUuid
            minVolumeSize: 5
          - volumeTypeZoneId: volumeTypeZoneId
            volumeTypeSku: volumeTypeSku
            iops: 2
            iopsId: 1
            description: description
            id: 6
            maxVolumeSize: 5
            type: type
            kafkaUuid: kafkaUuid
            minVolumeSize: 5
          projectId: projectId
        message: message
    WrapContentSetString:
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
        data:
          uniqueItems: true
          type: array
          items:
            type: string
      example:
        code: 0
        data:
        - data
        - data
        message: message
    NetworkResponse:
      type: object
      properties:
        id:
          type: string
        createdAt:
          type: string
          format: date-time
        status:
          type: string
        cidr:
          type: string
        displayName:
          type: string
      example:
        createdAt: 2000-01-23T04:56:07.000+00:00
        displayName: displayName
        cidr: cidr
        id: id
        status: status
    WrapContentListNetworkResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
        data:
          type: array
          items:
            $ref: '#/components/schemas/NetworkResponse'
      example:
        code: 0
        data:
        - createdAt: 2000-01-23T04:56:07.000+00:00
          displayName: displayName
          cidr: cidr
          id: id
          status: status
        - createdAt: 2000-01-23T04:56:07.000+00:00
          displayName: displayName
          cidr: cidr
          id: id
          status: status
        message: message
    NetworkResponseV2:
      type: object
      properties:
        uuid:
          type: string
        createdAt:
          type: string
          format: date-time
        status:
          type: string
        displayName:
          type: string
        networkId:
          type: integer
          format: int32
        subnets:
          type: array
          items:
            $ref: '#/components/schemas/SubnetResponse'
      example:
        createdAt: 2000-01-23T04:56:07.000+00:00
        displayName: displayName
        networkId: 6
        subnets:
        - createdAt: 2000-01-23T04:56:07.000+00:00
          deletedAt: 2000-01-23T04:56:07.000+00:00
          name: name
          interfaceAclPolicyUuid: interfaceAclPolicyUuid
          cidr: cidr
          routeTableUuid: routeTableUuid
          uuid: uuid
          networkUuid: networkUuid
          updatedAt: 2000-01-23T04:56:07.000+00:00
          status: status
        - createdAt: 2000-01-23T04:56:07.000+00:00
          deletedAt: 2000-01-23T04:56:07.000+00:00
          name: name
          interfaceAclPolicyUuid: interfaceAclPolicyUuid
          cidr: cidr
          routeTableUuid: routeTableUuid
          uuid: uuid
          networkUuid: networkUuid
          updatedAt: 2000-01-23T04:56:07.000+00:00
          status: status
        uuid: uuid
        status: status
    SubnetResponse:
      type: object
      properties:
        uuid:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        deletedAt:
          type: string
          format: date-time
        status:
          type: string
        cidr:
          type: string
        networkUuid:
          type: string
        routeTableUuid:
          type: string
        name:
          type: string
        interfaceAclPolicyUuid:
          type: string
      example:
        createdAt: 2000-01-23T04:56:07.000+00:00
        deletedAt: 2000-01-23T04:56:07.000+00:00
        name: name
        interfaceAclPolicyUuid: interfaceAclPolicyUuid
        cidr: cidr
        routeTableUuid: routeTableUuid
        uuid: uuid
        networkUuid: networkUuid
        updatedAt: 2000-01-23T04:56:07.000+00:00
        status: status
    WrapContentListNetworkResponseV2:
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
        data:
          type: array
          items:
            $ref: '#/components/schemas/NetworkResponseV2'
      example:
        code: 0
        data:
        - createdAt: 2000-01-23T04:56:07.000+00:00
          displayName: displayName
          networkId: 6
          subnets:
          - createdAt: 2000-01-23T04:56:07.000+00:00
            deletedAt: 2000-01-23T04:56:07.000+00:00
            name: name
            interfaceAclPolicyUuid: interfaceAclPolicyUuid
            cidr: cidr
            routeTableUuid: routeTableUuid
            uuid: uuid
            networkUuid: networkUuid
            updatedAt: 2000-01-23T04:56:07.000+00:00
            status: status
          - createdAt: 2000-01-23T04:56:07.000+00:00
            deletedAt: 2000-01-23T04:56:07.000+00:00
            name: name
            interfaceAclPolicyUuid: interfaceAclPolicyUuid
            cidr: cidr
            routeTableUuid: routeTableUuid
            uuid: uuid
            networkUuid: networkUuid
            updatedAt: 2000-01-23T04:56:07.000+00:00
            status: status
          uuid: uuid
          status: status
        - createdAt: 2000-01-23T04:56:07.000+00:00
          displayName: displayName
          networkId: 6
          subnets:
          - createdAt: 2000-01-23T04:56:07.000+00:00
            deletedAt: 2000-01-23T04:56:07.000+00:00
            name: name
            interfaceAclPolicyUuid: interfaceAclPolicyUuid
            cidr: cidr
            routeTableUuid: routeTableUuid
            uuid: uuid
            networkUuid: networkUuid
            updatedAt: 2000-01-23T04:56:07.000+00:00
            status: status
          - createdAt: 2000-01-23T04:56:07.000+00:00
            deletedAt: 2000-01-23T04:56:07.000+00:00
            name: name
            interfaceAclPolicyUuid: interfaceAclPolicyUuid
            cidr: cidr
            routeTableUuid: routeTableUuid
            uuid: uuid
            networkUuid: networkUuid
            updatedAt: 2000-01-23T04:56:07.000+00:00
            status: status
          uuid: uuid
          status: status
        message: message
    FlavorInfo:
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
        description:
          type: string
        vcpus:
          type: integer
          format: int32
        ram:
          type: integer
          format: int32
        flavorId:
          type: string
        priceKey:
          type: string
        zoneUUID:
          type: string
        zoneId:
          type: integer
          format: int32
        volumeSize:
          type: integer
          format: int32
        volumeType:
          type: string
        monthlyCost:
          type: number
          format: double
        backupSize:
          type: integer
          format: int32
        packageSku:
          type: string
        familyType:
          type: string
        platformType:
          type: string
        bandwidth:
          type: integer
          format: int32
        bandwidthUnit:
          type: string
      example:
        volumeType: volumeType
        familyType: familyType
        bandwidth: 3
        flavorId: flavorId
        zoneUUID: zoneUUID
        packageSku: packageSku
        platformType: platformType
        description: description
        vcpus: 1
        volumeSize: 2
        bandwidthUnit: bandwidthUnit
        priceKey: priceKey
        backupSize: 9
        name: name
        zoneId: 5
        id: 6
        monthlyCost: 7.061401241503109
        ram: 5
    WrapContentListFlavorInfo:
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
        data:
          type: array
          items:
            $ref: '#/components/schemas/FlavorInfo'
      example:
        code: 0
        data:
        - volumeType: volumeType
          familyType: familyType
          bandwidth: 3
          flavorId: flavorId
          zoneUUID: zoneUUID
          packageSku: packageSku
          platformType: platformType
          description: description
          vcpus: 1
          volumeSize: 2
          bandwidthUnit: bandwidthUnit
          priceKey: priceKey
          backupSize: 9
          name: name
          zoneId: 5
          id: 6
          monthlyCost: 7.061401241503109
          ram: 5
        - volumeType: volumeType
          familyType: familyType
          bandwidth: 3
          flavorId: flavorId
          zoneUUID: zoneUUID
          packageSku: packageSku
          platformType: platformType
          description: description
          vcpus: 1
          volumeSize: 2
          bandwidthUnit: bandwidthUnit
          priceKey: priceKey
          backupSize: 9
          name: name
          zoneId: 5
          id: 6
          monthlyCost: 7.061401241503109
          ram: 5
        message: message
    InstanceFamily:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        key:
          type: string
        value:
          type: string
        types:
          type: array
          items:
            type: object
        condition:
          type: object
        description:
          type: string
        group:
          type: string
      example:
        types:
        - {}
        - {}
        condition: {}
        name: name
        description: description
        id: id
        value: value
        key: key
        group: group
    WrapContentListInstanceFamily:
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
        data:
          type: array
          items:
            $ref: '#/components/schemas/InstanceFamily'
      example:
        code: 0
        data:
        - types:
          - {}
          - {}
          condition: {}
          name: name
          description: description
          id: id
          value: value
          key: key
          group: group
        - types:
          - {}
          - {}
          condition: {}
          name: name
          description: description
          id: id
          value: value
          key: key
          group: group
        message: message
    Engine:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        image:
          type: string
        engineLicenses:
          uniqueItems: true
          type: array
          items:
            type: string
      example:
        image: image
        name: name
        description: description
        engineLicenses:
        - engineLicenses
        - engineLicenses
    WrapContentSetEngine:
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
        data:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/Engine'
      example:
        code: 0
        data:
        - image: image
          name: name
          description: description
          engineLicenses:
          - engineLicenses
          - engineLicenses
        - image: image
          name: name
          description: description
          engineLicenses:
          - engineLicenses
          - engineLicenses
        message: message
    EngineVersion:
      type: object
      properties:
        name:
          type: string
        type:
          type: string
        versionName:
          type: string
        version:
          type: string
        licenseName:
          type: string
        licenseDesc:
          type: string
      example:
        licenseDesc: licenseDesc
        name: name
        licenseName: licenseName
        type: type
        versionName: versionName
        version: version
    WrapContentListEngineVersion:
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
        data:
          type: array
          items:
            $ref: '#/components/schemas/EngineVersion'
      example:
        code: 0
        data:
        - licenseDesc: licenseDesc
          name: name
          licenseName: licenseName
          type: type
          versionName: versionName
          version: version
        - licenseDesc: licenseDesc
          name: name
          licenseName: licenseName
          type: type
          versionName: versionName
          version: version
        message: message
    WrapContentListItemConfigInfo:
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
        data:
          type: array
          items:
            $ref: '#/components/schemas/ItemConfigInfo'
      example:
        code: 0
        data:
        - instances:
          - name: name
            id: id
          - name: name
            id: id
          instanceCount: 6
          created: created
          values:
            key: {}
          sharedBy: sharedBy
          name: name
          datastoreVersionName: datastoreVersionName
          description: description
          sharedActions:
          - sharedActions
          - sharedActions
          id: id
          datastoreName: datastoreName
          updated: updated
        - instances:
          - name: name
            id: id
          - name: name
            id: id
          instanceCount: 6
          created: created
          values:
            key: {}
          sharedBy: sharedBy
          name: name
          datastoreVersionName: datastoreVersionName
          description: description
          sharedActions:
          - sharedActions
          - sharedActions
          id: id
          datastoreName: datastoreName
          updated: updated
        message: message
    FlavorCode:
      type: object
      properties:
        key:
          type: string
        value:
          type: string
        description:
          type: string
        familyType:
          type: string
      example:
        familyType: familyType
        description: description
        value: value
        key: key
    WrapContentSetFlavorCode:
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
        data:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/FlavorCode'
      example:
        code: 0
        data:
        - familyType: familyType
          description: description
          value: value
          key: key
        - familyType: familyType
          description: description
          value: value
          key: key
        message: message
    FilterRequest:
      type: object
      properties:
        name:
          type: string
        status:
          type: array
          items:
            type: string
    AddressInfo:
      type: object
      properties:
        addr:
          type: string
        type:
          type: string
        subnet:
          type: string
      example:
        subnet: subnet
        addr: addr
        type: type
    DatabaseInstancesGateway:
      type: object
      properties:
        id:
          type: string
        dbBackendId:
          type: integer
          format: int32
        name:
          type: string
        status:
          type: string
        ram:
          type: integer
          format: int32
        vcpus:
          type: integer
          format: int32
        datastoreType:
          type: string
        priceKey:
          type: string
        zoneType:
          type: string
        engineGroup:
          type: integer
          format: int32
        datastoreVersion:
          type: string
        region:
          type: string
        volumeType:
          type: string
        volumeSize:
          type: integer
          format: int32
        volumeUsed:
          type: number
          format: float
        hostname:
          type: string
        ip:
          type: array
          items:
            type: string
        created:
          type: string
        updated:
          type: string
        role:
          type: string
        address:
          type: object
          additionalProperties:
            type: array
            items:
              $ref: '#/components/schemas/AddressInfo'
        configuration:
          $ref: '#/components/schemas/TinyConfigInfo'
        publicAccess:
          type: boolean
        backupAuto:
          type: boolean
        backupDuration:
          type: integer
          format: int32
        backupTime:
          type: string
        port:
          type: integer
          format: int32
        securityGroup:
          type: array
          items:
            $ref: '#/components/schemas/SecurityGroupEntity'
        volumeTypeZoneId:
          type: string
        quotaPackageId:
          type: string
        startTime:
          type: string
          format: date-time
        endTime:
          type: string
          format: date-time
        disabledAt:
          type: string
          format: date-time
        period:
          type: integer
          format: int32
        cost:
          type: number
          format: double
        poc:
          type: boolean
        license:
          type: string
        bandwidth:
          type: integer
          format: int32
        packageName:
          type: string
        backupUsage:
          type: number
          format: float
        freeBackupSize:
          type: integer
          format: int32
        replicaSourceId:
          type: string
        replicaSourceName:
          type: string
        replicas:
          type: array
          items:
            type: string
        redisPasswordEnabled:
          type: boolean
        sharedBy:
          type: string
        owner:
          type: boolean
        sharedActions:
          type: array
          items:
            type: string
        enableAutoRenew:
          type: boolean
        autoRenewPeriod:
          type: integer
          format: int32
        zoneUUID:
          type: string
        trialDb:
          type: boolean
        subnetId:
          type: string
        projectId:
          type: string
        skuFlavor:
          type: string
        skuVolume:
          type: string
      example:
        backupDuration: 9
        subnetId: subnetId
        volumeType: volumeType
        volumeUsed: 7.0614014
        publicAccess: true
        zoneType: zoneType
        sharedActions:
        - sharedActions
        - sharedActions
        priceKey: priceKey
        hostname: hostname
        id: id
        datastoreType: datastoreType
        ram: 1
        period: 2
        volumeTypeZoneId: volumeTypeZoneId
        created: created
        ip:
        - ip
        - ip
        securityGroup:
        - createdAt: 2000-01-23T04:56:07.000+00:00
          system: true
          servers:
          - {}
          - {}
          name: name
          description: description
          id: id
          status: status
        - createdAt: 2000-01-23T04:56:07.000+00:00
          system: true
          servers:
          - {}
          - {}
          name: name
          description: description
          id: id
          status: status
        redisPasswordEnabled: true
        license: license
        skuVolume: skuVolume
        port: 3
        sharedBy: sharedBy
        name: name
        dbBackendId: 6
        region: region
        skuFlavor: skuFlavor
        updated: updated
        projectId: projectId
        status: status
        role: role
        freeBackupSize: 1
        configuration:
          name: name
          id: id
        poc: true
        volumeSize: 2
        disabledAt: 2000-01-23T04:56:07.000+00:00
        engineGroup: 5
        backupUsage: 1.2315135
        autoRenewPeriod: 1
        backupAuto: true
        startTime: 2000-01-23T04:56:07.000+00:00
        packageName: packageName
        owner: true
        address:
          key:
          - subnet: subnet
            addr: addr
            type: type
          - subnet: subnet
            addr: addr
            type: type
        cost: 4.145608029883936
        replicaSourceId: replicaSourceId
        trialDb: true
        bandwidth: 7
        replicas:
        - replicas
        - replicas
        datastoreVersion: datastoreVersion
        zoneUUID: zoneUUID
        enableAutoRenew: true
        vcpus: 5
        replicaSourceName: replicaSourceName
        quotaPackageId: quotaPackageId
        endTime: 2000-01-23T04:56:07.000+00:00
        backupTime: backupTime
    DatabaseInstancesGatewayResponse:
      type: object
      properties:
        projectId:
          type: string
        data:
          type: array
          items:
            $ref: '#/components/schemas/DatabaseInstancesGateway'
        pageObject:
          $ref: '#/components/schemas/PageObjectWithLimitSize'
      example:
        data:
        - backupDuration: 9
          subnetId: subnetId
          volumeType: volumeType
          volumeUsed: 7.0614014
          publicAccess: true
          zoneType: zoneType
          sharedActions:
          - sharedActions
          - sharedActions
          priceKey: priceKey
          hostname: hostname
          id: id
          datastoreType: datastoreType
          ram: 1
          period: 2
          volumeTypeZoneId: volumeTypeZoneId
          created: created
          ip:
          - ip
          - ip
          securityGroup:
          - createdAt: 2000-01-23T04:56:07.000+00:00
            system: true
            servers:
            - {}
            - {}
            name: name
            description: description
            id: id
            status: status
          - createdAt: 2000-01-23T04:56:07.000+00:00
            system: true
            servers:
            - {}
            - {}
            name: name
            description: description
            id: id
            status: status
          redisPasswordEnabled: true
          license: license
          skuVolume: skuVolume
          port: 3
          sharedBy: sharedBy
          name: name
          dbBackendId: 6
          region: region
          skuFlavor: skuFlavor
          updated: updated
          projectId: projectId
          status: status
          role: role
          freeBackupSize: 1
          configuration:
            name: name
            id: id
          poc: true
          volumeSize: 2
          disabledAt: 2000-01-23T04:56:07.000+00:00
          engineGroup: 5
          backupUsage: 1.2315135
          autoRenewPeriod: 1
          backupAuto: true
          startTime: 2000-01-23T04:56:07.000+00:00
          packageName: packageName
          owner: true
          address:
            key:
            - subnet: subnet
              addr: addr
              type: type
            - subnet: subnet
              addr: addr
              type: type
          cost: 4.145608029883936
          replicaSourceId: replicaSourceId
          trialDb: true
          bandwidth: 7
          replicas:
          - replicas
          - replicas
          datastoreVersion: datastoreVersion
          zoneUUID: zoneUUID
          enableAutoRenew: true
          vcpus: 5
          replicaSourceName: replicaSourceName
          quotaPackageId: quotaPackageId
          endTime: 2000-01-23T04:56:07.000+00:00
          backupTime: backupTime
        - backupDuration: 9
          subnetId: subnetId
          volumeType: volumeType
          volumeUsed: 7.0614014
          publicAccess: true
          zoneType: zoneType
          sharedActions:
          - sharedActions
          - sharedActions
          priceKey: priceKey
          hostname: hostname
          id: id
          datastoreType: datastoreType
          ram: 1
          period: 2
          volumeTypeZoneId: volumeTypeZoneId
          created: created
          ip:
          - ip
          - ip
          securityGroup:
          - createdAt: 2000-01-23T04:56:07.000+00:00
            system: true
            servers:
            - {}
            - {}
            name: name
            description: description
            id: id
            status: status
          - createdAt: 2000-01-23T04:56:07.000+00:00
            system: true
            servers:
            - {}
            - {}
            name: name
            description: description
            id: id
            status: status
          redisPasswordEnabled: true
          license: license
          skuVolume: skuVolume
          port: 3
          sharedBy: sharedBy
          name: name
          dbBackendId: 6
          region: region
          skuFlavor: skuFlavor
          updated: updated
          projectId: projectId
          status: status
          role: role
          freeBackupSize: 1
          configuration:
            name: name
            id: id
          poc: true
          volumeSize: 2
          disabledAt: 2000-01-23T04:56:07.000+00:00
          engineGroup: 5
          backupUsage: 1.2315135
          autoRenewPeriod: 1
          backupAuto: true
          startTime: 2000-01-23T04:56:07.000+00:00
          packageName: packageName
          owner: true
          address:
            key:
            - subnet: subnet
              addr: addr
              type: type
            - subnet: subnet
              addr: addr
              type: type
          cost: 4.145608029883936
          replicaSourceId: replicaSourceId
          trialDb: true
          bandwidth: 7
          replicas:
          - replicas
          - replicas
          datastoreVersion: datastoreVersion
          zoneUUID: zoneUUID
          enableAutoRenew: true
          vcpus: 5
          replicaSourceName: replicaSourceName
          quotaPackageId: quotaPackageId
          endTime: 2000-01-23T04:56:07.000+00:00
          backupTime: backupTime
        projectId: projectId
        pageObject:
          number: 4
          size: 1
          totalPages: 6
          maxSize: 5
          totalElements: 7
    InstanceEntity:
      type: object
    PageObjectWithLimitSize:
      type: object
      properties:
        totalPages:
          type: integer
          format: int32
        totalElements:
          type: integer
          format: int32
        size:
          type: integer
          format: int32
        number:
          type: integer
          format: int32
        maxSize:
          type: integer
          format: int32
      example:
        number: 4
        size: 1
        totalPages: 6
        maxSize: 5
        totalElements: 7
    SecurityGroupEntity:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        status:
          type: string
        createdAt:
          type: string
          format: date-time
        system:
          type: boolean
        servers:
          type: array
          items:
            $ref: '#/components/schemas/InstanceEntity'
      example:
        createdAt: 2000-01-23T04:56:07.000+00:00
        system: true
        servers:
        - {}
        - {}
        name: name
        description: description
        id: id
        status: status
    TinyConfigInfo:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
      example:
        name: name
        id: id
    WrapContentDatabaseInstancesGatewayResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
        data:
          $ref: '#/components/schemas/DatabaseInstancesGatewayResponse'
      example:
        code: 0
        data:
          data:
          - backupDuration: 9
            subnetId: subnetId
            volumeType: volumeType
            volumeUsed: 7.0614014
            publicAccess: true
            zoneType: zoneType
            sharedActions:
            - sharedActions
            - sharedActions
            priceKey: priceKey
            hostname: hostname
            id: id
            datastoreType: datastoreType
            ram: 1
            period: 2
            volumeTypeZoneId: volumeTypeZoneId
            created: created
            ip:
            - ip
            - ip
            securityGroup:
            - createdAt: 2000-01-23T04:56:07.000+00:00
              system: true
              servers:
              - {}
              - {}
              name: name
              description: description
              id: id
              status: status
            - createdAt: 2000-01-23T04:56:07.000+00:00
              system: true
              servers:
              - {}
              - {}
              name: name
              description: description
              id: id
              status: status
            redisPasswordEnabled: true
            license: license
            skuVolume: skuVolume
            port: 3
            sharedBy: sharedBy
            name: name
            dbBackendId: 6
            region: region
            skuFlavor: skuFlavor
            updated: updated
            projectId: projectId
            status: status
            role: role
            freeBackupSize: 1
            configuration:
              name: name
              id: id
            poc: true
            volumeSize: 2
            disabledAt: 2000-01-23T04:56:07.000+00:00
            engineGroup: 5
            backupUsage: 1.2315135
            autoRenewPeriod: 1
            backupAuto: true
            startTime: 2000-01-23T04:56:07.000+00:00
            packageName: packageName
            owner: true
            address:
              key:
              - subnet: subnet
                addr: addr
                type: type
              - subnet: subnet
                addr: addr
                type: type
            cost: 4.145608029883936
            replicaSourceId: replicaSourceId
            trialDb: true
            bandwidth: 7
            replicas:
            - replicas
            - replicas
            datastoreVersion: datastoreVersion
            zoneUUID: zoneUUID
            enableAutoRenew: true
            vcpus: 5
            replicaSourceName: replicaSourceName
            quotaPackageId: quotaPackageId
            endTime: 2000-01-23T04:56:07.000+00:00
            backupTime: backupTime
          - backupDuration: 9
            subnetId: subnetId
            volumeType: volumeType
            volumeUsed: 7.0614014
            publicAccess: true
            zoneType: zoneType
            sharedActions:
            - sharedActions
            - sharedActions
            priceKey: priceKey
            hostname: hostname
            id: id
            datastoreType: datastoreType
            ram: 1
            period: 2
            volumeTypeZoneId: volumeTypeZoneId
            created: created
            ip:
            - ip
            - ip
            securityGroup:
            - createdAt: 2000-01-23T04:56:07.000+00:00
              system: true
              servers:
              - {}
              - {}
              name: name
              description: description
              id: id
              status: status
            - createdAt: 2000-01-23T04:56:07.000+00:00
              system: true
              servers:
              - {}
              - {}
              name: name
              description: description
              id: id
              status: status
            redisPasswordEnabled: true
            license: license
            skuVolume: skuVolume
            port: 3
            sharedBy: sharedBy
            name: name
            dbBackendId: 6
            region: region
            skuFlavor: skuFlavor
            updated: updated
            projectId: projectId
            status: status
            role: role
            freeBackupSize: 1
            configuration:
              name: name
              id: id
            poc: true
            volumeSize: 2
            disabledAt: 2000-01-23T04:56:07.000+00:00
            engineGroup: 5
            backupUsage: 1.2315135
            autoRenewPeriod: 1
            backupAuto: true
            startTime: 2000-01-23T04:56:07.000+00:00
            packageName: packageName
            owner: true
            address:
              key:
              - subnet: subnet
                addr: addr
                type: type
              - subnet: subnet
                addr: addr
                type: type
            cost: 4.145608029883936
            replicaSourceId: replicaSourceId
            trialDb: true
            bandwidth: 7
            replicas:
            - replicas
            - replicas
            datastoreVersion: datastoreVersion
            zoneUUID: zoneUUID
            enableAutoRenew: true
            vcpus: 5
            replicaSourceName: replicaSourceName
            quotaPackageId: quotaPackageId
            endTime: 2000-01-23T04:56:07.000+00:00
            backupTime: backupTime
          projectId: projectId
          pageObject:
            number: 4
            size: 1
            totalPages: 6
            maxSize: 5
            totalElements: 7
        message: message
    DbInstanceInfo:
      type: object
      properties:
        id:
          type: string
        dbBackendId:
          type: integer
          format: int32
        name:
          type: string
        status:
          type: string
        ram:
          type: integer
          format: int32
        vcpus:
          type: integer
          format: int32
        datastoreType:
          type: string
        priceKey:
          type: string
        zoneType:
          type: string
        engineGroup:
          type: integer
          format: int32
        datastoreVersion:
          type: string
        region:
          type: string
        volumeType:
          type: string
        volumeSize:
          type: integer
          format: int32
        volumeUsed:
          type: number
          format: float
        hostname:
          type: string
        ip:
          type: array
          items:
            type: string
        created:
          type: string
        updated:
          type: string
        role:
          type: string
        address:
          type: object
          additionalProperties:
            type: array
            items:
              $ref: '#/components/schemas/AddressInfo'
        configuration:
          $ref: '#/components/schemas/TinyConfigInfo'
        publicAccess:
          type: boolean
        backupAuto:
          type: boolean
        backupDuration:
          type: integer
          format: int32
        backupTime:
          type: string
        port:
          type: integer
          format: int32
        securityGroup:
          type: array
          items:
            $ref: '#/components/schemas/SecurityGroupEntity'
        volumeTypeZoneId:
          type: string
        quotaPackageId:
          type: string
        startTime:
          type: string
          format: date-time
        endTime:
          type: string
          format: date-time
        disabledAt:
          type: string
          format: date-time
        period:
          type: integer
          format: int32
        cost:
          type: number
          format: double
        poc:
          type: boolean
        license:
          type: string
        bandwidth:
          type: integer
          format: int32
        packageName:
          type: string
        backupUsage:
          type: number
          format: float
        freeBackupSize:
          type: integer
          format: int32
        replicaSourceId:
          type: string
        replicaSourceName:
          type: string
        replicas:
          type: array
          items:
            type: string
        redisPasswordEnabled:
          type: boolean
        sharedBy:
          type: string
        owner:
          type: boolean
        sharedActions:
          type: array
          items:
            type: string
        enableAutoRenew:
          type: boolean
        autoRenewPeriod:
          type: integer
          format: int32
        zoneUUID:
          type: string
        trialDb:
          type: boolean
        subnetId:
          type: string
        projectId:
          type: string
        skuFlavor:
          type: string
        skuVolume:
          type: string
        configId:
          type: string
        deleted:
          type: boolean
      example:
        backupDuration: 9
        subnetId: subnetId
        volumeType: volumeType
        volumeUsed: 7.0614014
        publicAccess: true
        zoneType: zoneType
        sharedActions:
        - sharedActions
        - sharedActions
        priceKey: priceKey
        hostname: hostname
        configId: configId
        id: id
        datastoreType: datastoreType
        ram: 1
        period: 2
        volumeTypeZoneId: volumeTypeZoneId
        created: created
        ip:
        - ip
        - ip
        securityGroup:
        - createdAt: 2000-01-23T04:56:07.000+00:00
          system: true
          servers:
          - {}
          - {}
          name: name
          description: description
          id: id
          status: status
        - createdAt: 2000-01-23T04:56:07.000+00:00
          system: true
          servers:
          - {}
          - {}
          name: name
          description: description
          id: id
          status: status
        redisPasswordEnabled: true
        license: license
        skuVolume: skuVolume
        port: 3
        sharedBy: sharedBy
        name: name
        dbBackendId: 6
        region: region
        skuFlavor: skuFlavor
        updated: updated
        projectId: projectId
        status: status
        role: role
        freeBackupSize: 1
        configuration:
          name: name
          id: id
        poc: true
        volumeSize: 2
        disabledAt: 2000-01-23T04:56:07.000+00:00
        engineGroup: 5
        backupUsage: 1.2315135
        autoRenewPeriod: 1
        backupAuto: true
        startTime: 2000-01-23T04:56:07.000+00:00
        packageName: packageName
        owner: true
        address:
          key:
          - subnet: subnet
            addr: addr
            type: type
          - subnet: subnet
            addr: addr
            type: type
        cost: 4.145608029883936
        replicaSourceId: replicaSourceId
        trialDb: true
        bandwidth: 7
        replicas:
        - replicas
        - replicas
        datastoreVersion: datastoreVersion
        zoneUUID: zoneUUID
        enableAutoRenew: true
        vcpus: 5
        deleted: true
        replicaSourceName: replicaSourceName
        quotaPackageId: quotaPackageId
        endTime: 2000-01-23T04:56:07.000+00:00
        backupTime: backupTime
    WrapContentDbInstanceInfo:
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
        data:
          $ref: '#/components/schemas/DbInstanceInfo'
      example:
        code: 0
        data:
          backupDuration: 9
          subnetId: subnetId
          volumeType: volumeType
          volumeUsed: 7.0614014
          publicAccess: true
          zoneType: zoneType
          sharedActions:
          - sharedActions
          - sharedActions
          priceKey: priceKey
          hostname: hostname
          configId: configId
          id: id
          datastoreType: datastoreType
          ram: 1
          period: 2
          volumeTypeZoneId: volumeTypeZoneId
          created: created
          ip:
          - ip
          - ip
          securityGroup:
          - createdAt: 2000-01-23T04:56:07.000+00:00
            system: true
            servers:
            - {}
            - {}
            name: name
            description: description
            id: id
            status: status
          - createdAt: 2000-01-23T04:56:07.000+00:00
            system: true
            servers:
            - {}
            - {}
            name: name
            description: description
            id: id
            status: status
          redisPasswordEnabled: true
          license: license
          skuVolume: skuVolume
          port: 3
          sharedBy: sharedBy
          name: name
          dbBackendId: 6
          region: region
          skuFlavor: skuFlavor
          updated: updated
          projectId: projectId
          status: status
          role: role
          freeBackupSize: 1
          configuration:
            name: name
            id: id
          poc: true
          volumeSize: 2
          disabledAt: 2000-01-23T04:56:07.000+00:00
          engineGroup: 5
          backupUsage: 1.2315135
          autoRenewPeriod: 1
          backupAuto: true
          startTime: 2000-01-23T04:56:07.000+00:00
          packageName: packageName
          owner: true
          address:
            key:
            - subnet: subnet
              addr: addr
              type: type
            - subnet: subnet
              addr: addr
              type: type
          cost: 4.145608029883936
          replicaSourceId: replicaSourceId
          trialDb: true
          bandwidth: 7
          replicas:
          - replicas
          - replicas
          datastoreVersion: datastoreVersion
          zoneUUID: zoneUUID
          enableAutoRenew: true
          vcpus: 5
          deleted: true
          replicaSourceName: replicaSourceName
          quotaPackageId: quotaPackageId
          endTime: 2000-01-23T04:56:07.000+00:00
          backupTime: backupTime
        message: message
    DBInstancesHistoryGatewayResponse:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/HistoryResponse'
        pageObject:
          $ref: '#/components/schemas/PageObject'
      example:
        pageObject:
          number: 7
          size: 2
          totalPages: 5
          totalElements: 5
        content:
        - updatedTime: 2000-01-23T04:56:07.000+00:00
          instanceId: instanceId
          errorMessage: errorMessage
          action: action
          description: description
          createdTime: 2000-01-23T04:56:07.000+00:00
          id: 6
          projectId: projectId
          userId: 1
          status: status
        - updatedTime: 2000-01-23T04:56:07.000+00:00
          instanceId: instanceId
          errorMessage: errorMessage
          action: action
          description: description
          createdTime: 2000-01-23T04:56:07.000+00:00
          id: 6
          projectId: projectId
          userId: 1
          status: status
    HistoryResponse:
      type: object
      properties:
        id:
          type: integer
          format: int32
        instanceId:
          type: string
        projectId:
          type: string
        action:
          type: string
        status:
          type: string
        description:
          type: string
        userId:
          type: integer
          format: int32
        createdTime:
          type: string
          format: date-time
        updatedTime:
          type: string
          format: date-time
        errorMessage:
          type: string
      example:
        updatedTime: 2000-01-23T04:56:07.000+00:00
        instanceId: instanceId
        errorMessage: errorMessage
        action: action
        description: description
        createdTime: 2000-01-23T04:56:07.000+00:00
        id: 6
        projectId: projectId
        userId: 1
        status: status
    PageObject:
      type: object
      properties:
        totalPages:
          type: integer
          format: int32
        totalElements:
          type: integer
          format: int32
        size:
          type: integer
          format: int32
        number:
          type: integer
          format: int32
      example:
        number: 7
        size: 2
        totalPages: 5
        totalElements: 5
    WrapContentDBInstancesHistoryGatewayResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
        data:
          $ref: '#/components/schemas/DBInstancesHistoryGatewayResponse'
      example:
        code: 0
        data:
          pageObject:
            number: 7
            size: 2
            totalPages: 5
            totalElements: 5
          content:
          - updatedTime: 2000-01-23T04:56:07.000+00:00
            instanceId: instanceId
            errorMessage: errorMessage
            action: action
            description: description
            createdTime: 2000-01-23T04:56:07.000+00:00
            id: 6
            projectId: projectId
            userId: 1
            status: status
          - updatedTime: 2000-01-23T04:56:07.000+00:00
            instanceId: instanceId
            errorMessage: errorMessage
            action: action
            description: description
            createdTime: 2000-01-23T04:56:07.000+00:00
            id: 6
            projectId: projectId
            userId: 1
            status: status
        message: message
    BackupInfo:
      type: object
      properties:
        id:
          type: string
        backendId:
          type: integer
          format: int64
        name:
          type: string
        description:
          type: string
        dbInstanceId:
          type: string
        projectId:
          type: string
        instanceName:
          type: string
        type:
          type: string
        parent:
          type: string
        parentName:
          type: string
        created:
          type: string
        updated:
          type: string
        backupType:
          type: string
        backupDuration:
          type: integer
          format: int32
        status:
          type: string
        datastoreType:
          type: string
        datastoreVersion:
          type: string
        storageType:
          type: string
        storageSize:
          type: integer
          format: int32
        ram:
          type: integer
          format: int32
        vcpu:
          type: integer
          format: int32
        packageId:
          type: string
        username:
          type: string
        configId:
          type: string
        configName:
          type: string
        netIds:
          type: array
          items:
            type: string
        isRestoring:
          type: boolean
        priceKey:
          type: string
        size:
          type: number
          format: float
        backupTier:
          type: string
        engineGroup:
          type: integer
          format: int32
        sharedBy:
          type: string
        netName:
          type: string
        sharedActions:
          type: array
          items:
            type: string
      example:
        backupDuration: 1
        parent: parent
        instanceName: instanceName
        vcpu: 2
        netName: netName
        description: description
        sharedActions:
        - sharedActions
        - sharedActions
        type: type
        backupType: backupType
        priceKey: priceKey
        engineGroup: 9
        configId: configId
        backupTier: backupTier
        id: id
        datastoreType: datastoreType
        ram: 5
        configName: configName
        netIds:
        - netIds
        - netIds
        created: created
        datastoreVersion: datastoreVersion
        dbInstanceId: dbInstanceId
        packageId: packageId
        backendId: 6
        parentName: parentName
        size: 7.0614014
        storageSize: 5
        sharedBy: sharedBy
        name: name
        storageType: storageType
        isRestoring: true
        projectId: projectId
        updated: updated
        status: status
        username: username
    WrapContentListBackupInfo:
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
        data:
          type: array
          items:
            $ref: '#/components/schemas/BackupInfo'
      example:
        code: 0
        data:
        - backupDuration: 1
          parent: parent
          instanceName: instanceName
          vcpu: 2
          netName: netName
          description: description
          sharedActions:
          - sharedActions
          - sharedActions
          type: type
          backupType: backupType
          priceKey: priceKey
          engineGroup: 9
          configId: configId
          backupTier: backupTier
          id: id
          datastoreType: datastoreType
          ram: 5
          configName: configName
          netIds:
          - netIds
          - netIds
          created: created
          datastoreVersion: datastoreVersion
          dbInstanceId: dbInstanceId
          packageId: packageId
          backendId: 6
          parentName: parentName
          size: 7.0614014
          storageSize: 5
          sharedBy: sharedBy
          name: name
          storageType: storageType
          isRestoring: true
          projectId: projectId
          updated: updated
          status: status
          username: username
        - backupDuration: 1
          parent: parent
          instanceName: instanceName
          vcpu: 2
          netName: netName
          description: description
          sharedActions:
          - sharedActions
          - sharedActions
          type: type
          backupType: backupType
          priceKey: priceKey
          engineGroup: 9
          configId: configId
          backupTier: backupTier
          id: id
          datastoreType: datastoreType
          ram: 5
          configName: configName
          netIds:
          - netIds
          - netIds
          created: created
          datastoreVersion: datastoreVersion
          dbInstanceId: dbInstanceId
          packageId: packageId
          backendId: 6
          parentName: parentName
          size: 7.0614014
          storageSize: 5
          sharedBy: sharedBy
          name: name
          storageType: storageType
          isRestoring: true
          projectId: projectId
          updated: updated
          status: status
          username: username
        message: message
    ConfigInfoGatewayResponse:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/ItemConfigInfo'
        pageObject:
          $ref: '#/components/schemas/PageObjectWithLimitSize'
      example:
        pageObject:
          number: 4
          size: 1
          totalPages: 6
          maxSize: 5
          totalElements: 7
        content:
        - instances:
          - name: name
            id: id
          - name: name
            id: id
          instanceCount: 6
          created: created
          values:
            key: {}
          sharedBy: sharedBy
          name: name
          datastoreVersionName: datastoreVersionName
          description: description
          sharedActions:
          - sharedActions
          - sharedActions
          id: id
          datastoreName: datastoreName
          updated: updated
        - instances:
          - name: name
            id: id
          - name: name
            id: id
          instanceCount: 6
          created: created
          values:
            key: {}
          sharedBy: sharedBy
          name: name
          datastoreVersionName: datastoreVersionName
          description: description
          sharedActions:
          - sharedActions
          - sharedActions
          id: id
          datastoreName: datastoreName
          updated: updated
    WrapContentConfigInfoGatewayResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
        data:
          $ref: '#/components/schemas/ConfigInfoGatewayResponse'
      example:
        code: 0
        data:
          pageObject:
            number: 4
            size: 1
            totalPages: 6
            maxSize: 5
            totalElements: 7
          content:
          - instances:
            - name: name
              id: id
            - name: name
              id: id
            instanceCount: 6
            created: created
            values:
              key: {}
            sharedBy: sharedBy
            name: name
            datastoreVersionName: datastoreVersionName
            description: description
            sharedActions:
            - sharedActions
            - sharedActions
            id: id
            datastoreName: datastoreName
            updated: updated
          - instances:
            - name: name
              id: id
            - name: name
              id: id
            instanceCount: 6
            created: created
            values:
              key: {}
            sharedBy: sharedBy
            name: name
            datastoreVersionName: datastoreVersionName
            description: description
            sharedActions:
            - sharedActions
            - sharedActions
            id: id
            datastoreName: datastoreName
            updated: updated
        message: message
    ConfigurationParamInfo:
      type: object
      properties:
        name:
          type: string
        max:
          type: string
        min:
          type: string
        restartRequired:
          type: boolean
        type:
          type: string
        values:
          type: array
          items:
            type: string
        modifiable:
          type: boolean
        description:
          type: string
      example:
        min: min
        restartRequired: true
        max: max
        values:
        - values
        - values
        name: name
        description: description
        type: type
        modifiable: true
    WrapContentListConfigurationParamInfo:
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
        data:
          type: array
          items:
            $ref: '#/components/schemas/ConfigurationParamInfo'
      example:
        code: 0
        data:
        - min: min
          restartRequired: true
          max: max
          values:
          - values
          - values
          name: name
          description: description
          type: type
          modifiable: true
        - min: min
          restartRequired: true
          max: max
          values:
          - values
          - values
          name: name
          description: description
          type: type
          modifiable: true
        message: message
    BackupInfoGatewayResponse:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/BackupInfo'
        pageObject:
          $ref: '#/components/schemas/PageObjectWithLimitSize'
      example:
        pageObject:
          number: 4
          size: 1
          totalPages: 6
          maxSize: 5
          totalElements: 7
        content:
        - backupDuration: 1
          parent: parent
          instanceName: instanceName
          vcpu: 2
          netName: netName
          description: description
          sharedActions:
          - sharedActions
          - sharedActions
          type: type
          backupType: backupType
          priceKey: priceKey
          engineGroup: 9
          configId: configId
          backupTier: backupTier
          id: id
          datastoreType: datastoreType
          ram: 5
          configName: configName
          netIds:
          - netIds
          - netIds
          created: created
          datastoreVersion: datastoreVersion
          dbInstanceId: dbInstanceId
          packageId: packageId
          backendId: 6
          parentName: parentName
          size: 7.0614014
          storageSize: 5
          sharedBy: sharedBy
          name: name
          storageType: storageType
          isRestoring: true
          projectId: projectId
          updated: updated
          status: status
          username: username
        - backupDuration: 1
          parent: parent
          instanceName: instanceName
          vcpu: 2
          netName: netName
          description: description
          sharedActions:
          - sharedActions
          - sharedActions
          type: type
          backupType: backupType
          priceKey: priceKey
          engineGroup: 9
          configId: configId
          backupTier: backupTier
          id: id
          datastoreType: datastoreType
          ram: 5
          configName: configName
          netIds:
          - netIds
          - netIds
          created: created
          datastoreVersion: datastoreVersion
          dbInstanceId: dbInstanceId
          packageId: packageId
          backendId: 6
          parentName: parentName
          size: 7.0614014
          storageSize: 5
          sharedBy: sharedBy
          name: name
          storageType: storageType
          isRestoring: true
          projectId: projectId
          updated: updated
          status: status
          username: username
    WrapContentBackupInfoGatewayResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
        data:
          $ref: '#/components/schemas/BackupInfoGatewayResponse'
      example:
        code: 0
        data:
          pageObject:
            number: 4
            size: 1
            totalPages: 6
            maxSize: 5
            totalElements: 7
          content:
          - backupDuration: 1
            parent: parent
            instanceName: instanceName
            vcpu: 2
            netName: netName
            description: description
            sharedActions:
            - sharedActions
            - sharedActions
            type: type
            backupType: backupType
            priceKey: priceKey
            engineGroup: 9
            configId: configId
            backupTier: backupTier
            id: id
            datastoreType: datastoreType
            ram: 5
            configName: configName
            netIds:
            - netIds
            - netIds
            created: created
            datastoreVersion: datastoreVersion
            dbInstanceId: dbInstanceId
            packageId: packageId
            backendId: 6
            parentName: parentName
            size: 7.0614014
            storageSize: 5
            sharedBy: sharedBy
            name: name
            storageType: storageType
            isRestoring: true
            projectId: projectId
            updated: updated
            status: status
            username: username
          - backupDuration: 1
            parent: parent
            instanceName: instanceName
            vcpu: 2
            netName: netName
            description: description
            sharedActions:
            - sharedActions
            - sharedActions
            type: type
            backupType: backupType
            priceKey: priceKey
            engineGroup: 9
            configId: configId
            backupTier: backupTier
            id: id
            datastoreType: datastoreType
            ram: 5
            configName: configName
            netIds:
            - netIds
            - netIds
            created: created
            datastoreVersion: datastoreVersion
            dbInstanceId: dbInstanceId
            packageId: packageId
            backendId: 6
            parentName: parentName
            size: 7.0614014
            storageSize: 5
            sharedBy: sharedBy
            name: name
            storageType: storageType
            isRestoring: true
            projectId: projectId
            updated: updated
            status: status
            username: username
        message: message
    WrapContentBackupInfo:
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
        data:
          $ref: '#/components/schemas/BackupInfo'
      example:
        code: 0
        data:
          backupDuration: 1
          parent: parent
          instanceName: instanceName
          vcpu: 2
          netName: netName
          description: description
          sharedActions:
          - sharedActions
          - sharedActions
          type: type
          backupType: backupType
          priceKey: priceKey
          engineGroup: 9
          configId: configId
          backupTier: backupTier
          id: id
          datastoreType: datastoreType
          ram: 5
          configName: configName
          netIds:
          - netIds
          - netIds
          created: created
          datastoreVersion: datastoreVersion
          dbInstanceId: dbInstanceId
          packageId: packageId
          backendId: 6
          parentName: parentName
          size: 7.0614014
          storageSize: 5
          sharedBy: sharedBy
          name: name
          storageType: storageType
          isRestoring: true
          projectId: projectId
          updated: updated
          status: status
          username: username
        message: message
    FreeBackupStorageInfo:
      type: object
      properties:
        freeBackupStorage:
          type: integer
          format: int32
        backupUsage:
          type: number
          format: float
      example:
        freeBackupStorage: 6
        backupUsage: 1.4658129
    WrapContentFreeBackupStorageInfo:
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
        data:
          $ref: '#/components/schemas/FreeBackupStorageInfo'
      example:
        code: 0
        data:
          freeBackupStorage: 6
          backupUsage: 1.4658129
        message: message
    BackupStorageDetail:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        usage:
          type: number
          format: float
        quota:
          type: integer
          format: int32
        status:
          type: string
        engineGroup:
          type: integer
          format: int32
        backupPackageId:
          type: string
        backupPackageName:
          type: string
        skuDbaasBackupStorage:
          type: string
      example:
        usage: 6.0274563
        quota: 1
        name: name
        backupPackageName: backupPackageName
        backupPackageId: backupPackageId
        skuDbaasBackupStorage: skuDbaasBackupStorage
        id: id
        status: status
        engineGroup: 5
    WrapContentListBackupStorageDetail:
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
        data:
          type: array
          items:
            $ref: '#/components/schemas/BackupStorageDetail'
      example:
        code: 0
        data:
        - usage: 6.0274563
          quota: 1
          name: name
          backupPackageName: backupPackageName
          backupPackageId: backupPackageId
          skuDbaasBackupStorage: skuDbaasBackupStorage
          id: id
          status: status
          engineGroup: 5
        - usage: 6.0274563
          quota: 1
          name: name
          backupPackageName: backupPackageName
          backupPackageId: backupPackageId
          skuDbaasBackupStorage: skuDbaasBackupStorage
          id: id
          status: status
          engineGroup: 5
        message: message
    DbBackupPackageDetail:
      type: object
      properties:
        packageId:
          type: integer
          format: int32
        sku:
          type: string
        resourceTypeId:
          type: integer
          format: int32
        resourceName:
          type: string
        description:
          type: string
        packageName:
          type: string
        packageQuota:
          type: string
        packageConfig:
          type: string
        price:
          type: integer
          format: int64
      example:
        price: 5
        resourceTypeId: 5
        packageId: 1
        packageQuota: packageQuota
        description: description
        resourceName: resourceName
        packageName: packageName
        sku: sku
        packageConfig: packageConfig
    DbBackupPackageResponse:
      type: object
      properties:
        engineGroup:
          type: integer
          format: int32
        packages:
          type: array
          items:
            $ref: '#/components/schemas/DbBackupPackageDetail'
      example:
        packages:
        - price: 5
          resourceTypeId: 5
          packageId: 1
          packageQuota: packageQuota
          description: description
          resourceName: resourceName
          packageName: packageName
          sku: sku
          packageConfig: packageConfig
        - price: 5
          resourceTypeId: 5
          packageId: 1
          packageQuota: packageQuota
          description: description
          resourceName: resourceName
          packageName: packageName
          sku: sku
          packageConfig: packageConfig
        engineGroup: 6
    WrapContentListDbBackupPackageResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
        data:
          type: array
          items:
            $ref: '#/components/schemas/DbBackupPackageResponse'
      example:
        code: 0
        data:
        - packages:
          - price: 5
            resourceTypeId: 5
            packageId: 1
            packageQuota: packageQuota
            description: description
            resourceName: resourceName
            packageName: packageName
            sku: sku
            packageConfig: packageConfig
          - price: 5
            resourceTypeId: 5
            packageId: 1
            packageQuota: packageQuota
            description: description
            resourceName: resourceName
            packageName: packageName
            sku: sku
            packageConfig: packageConfig
          engineGroup: 6
        - packages:
          - price: 5
            resourceTypeId: 5
            packageId: 1
            packageQuota: packageQuota
            description: description
            resourceName: resourceName
            packageName: packageName
            sku: sku
            packageConfig: packageConfig
          - price: 5
            resourceTypeId: 5
            packageId: 1
            packageQuota: packageQuota
            description: description
            resourceName: resourceName
            packageName: packageName
            sku: sku
            packageConfig: packageConfig
          engineGroup: 6
        message: message
    WrapContentMapStringString:
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
        data:
          type: object
          additionalProperties:
            type: string
      example:
        code: 0
        data:
          key: data
        message: message
    BillingElement:
      type: object
      properties:
        sku:
          type: string
        quantity:
          type: integer
          format: int32
        metaKey:
          type: string
      example:
        quantity: 7
        metaKey: metaKey
        sku: sku
    ResourceBilling:
      type: object
      properties:
        artifactId:
          type: string
        artifactName:
          type: string
        artifactType:
          type: string
        renewType:
          type: string
        billingType:
          type: string
        status:
          type: string
        statusUI:
          type: string
        startBillingTime:
          type: integer
          format: int64
        endBillingTime:
          type: integer
          format: int64
        dateLeft:
          type: integer
          format: int32
        cost:
          type: number
          format: double
        isRenewing:
          type: boolean
        renewPeriod:
          type: integer
          format: int32
        billingElements:
          type: array
          items:
            $ref: '#/components/schemas/BillingElement'
      example:
        artifactType: artifactType
        dateLeft: 5
        cost: 5.637376656633329
        renewType: renewType
        isRenewing: true
        renewPeriod: 2
        billingType: billingType
        artifactName: artifactName
        endBillingTime: 1
        artifactId: artifactId
        startBillingTime: 6
        billingElements:
        - quantity: 7
          metaKey: metaKey
          sku: sku
        - quantity: 7
          metaKey: metaKey
          sku: sku
        status: status
        statusUI: statusUI
    ResourcesBillingInfo:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/ResourceBilling'
        totalAutoRenews:
          type: integer
          format: int32
        totalGoodResources:
          type: integer
          format: int32
        totalWarningResources:
          type: integer
          format: int32
        totalAlertedResources:
          type: integer
          format: int32
        totalExpiredResources:
          type: integer
          format: int32
        extra:
          type: object
          additionalProperties:
            type: integer
            format: int32
      example:
        totalAutoRenews: 9
        totalGoodResources: 3
        totalExpiredResources: 7
        data:
        - artifactType: artifactType
          dateLeft: 5
          cost: 5.637376656633329
          renewType: renewType
          isRenewing: true
          renewPeriod: 2
          billingType: billingType
          artifactName: artifactName
          endBillingTime: 1
          artifactId: artifactId
          startBillingTime: 6
          billingElements:
          - quantity: 7
            metaKey: metaKey
            sku: sku
          - quantity: 7
            metaKey: metaKey
            sku: sku
          status: status
          statusUI: statusUI
        - artifactType: artifactType
          dateLeft: 5
          cost: 5.637376656633329
          renewType: renewType
          isRenewing: true
          renewPeriod: 2
          billingType: billingType
          artifactName: artifactName
          endBillingTime: 1
          artifactId: artifactId
          startBillingTime: 6
          billingElements:
          - quantity: 7
            metaKey: metaKey
            sku: sku
          - quantity: 7
            metaKey: metaKey
            sku: sku
          status: status
          statusUI: statusUI
        totalAlertedResources: 4
        extra:
          key: 1
        totalWarningResources: 2
    WrapContentResourcesBillingInfo:
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
        data:
          $ref: '#/components/schemas/ResourcesBillingInfo'
      example:
        code: 0
        data:
          totalAutoRenews: 9
          totalGoodResources: 3
          totalExpiredResources: 7
          data:
          - artifactType: artifactType
            dateLeft: 5
            cost: 5.637376656633329
            renewType: renewType
            isRenewing: true
            renewPeriod: 2
            billingType: billingType
            artifactName: artifactName
            endBillingTime: 1
            artifactId: artifactId
            startBillingTime: 6
            billingElements:
            - quantity: 7
              metaKey: metaKey
              sku: sku
            - quantity: 7
              metaKey: metaKey
              sku: sku
            status: status
            statusUI: statusUI
          - artifactType: artifactType
            dateLeft: 5
            cost: 5.637376656633329
            renewType: renewType
            isRenewing: true
            renewPeriod: 2
            billingType: billingType
            artifactName: artifactName
            endBillingTime: 1
            artifactId: artifactId
            startBillingTime: 6
            billingElements:
            - quantity: 7
              metaKey: metaKey
              sku: sku
            - quantity: 7
              metaKey: metaKey
              sku: sku
            status: status
            statusUI: statusUI
          totalAlertedResources: 4
          extra:
            key: 1
          totalWarningResources: 2
        message: message
